namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: MLBatchScorerSchema

	/// <exclude/>
	public class MLBatchScorerSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public MLBatchScorerSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public MLBatchScorerSchema(MLBatchScorerSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("94a1827a-9241-4908-b110-6cc1dd10cabd");
			Name = "MLBatchScorer";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("11899473-4fd2-4242-bdeb-3205232c82be");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,141,148,193,142,218,48,16,134,207,172,180,239,48,162,151,80,161,176,109,111,93,216,195,82,109,133,68,90,84,118,123,169,122,48,201,4,92,37,118,52,118,168,104,213,119,239,216,14,36,97,209,106,47,145,61,246,255,207,248,27,59,74,148,104,42,145,34,220,175,146,181,206,109,60,215,42,151,219,154,132,149,90,197,201,242,250,234,239,245,213,160,54,82,109,97,125,48,22,203,219,211,124,174,9,219,89,235,64,24,63,136,212,106,146,104,158,175,39,203,120,161,44,82,206,105,221,50,111,120,67,184,229,116,48,47,132,49,31,33,89,222,11,155,238,214,41,59,145,223,48,153,76,96,106,234,178,20,116,184,107,230,126,217,0,42,43,45,39,130,144,165,34,204,100,106,229,30,161,20,233,78,42,132,2,5,41,183,86,234,12,139,248,104,55,233,248,253,248,132,185,168,11,123,47,85,198,59,35,123,168,80,231,209,162,169,100,21,76,53,141,198,240,133,145,193,140,107,100,82,198,154,216,149,193,146,21,233,77,129,229,35,11,71,63,217,177,170,55,133,76,33,117,39,234,31,8,78,7,60,217,78,27,147,175,181,173,106,235,10,98,232,252,109,193,184,92,84,187,189,204,103,229,189,195,142,115,50,62,176,80,140,68,20,242,15,99,17,160,240,55,72,214,11,197,125,214,57,216,29,178,4,17,82,194,124,54,236,21,55,156,220,133,154,29,166,231,156,66,164,18,36,74,80,12,98,54,172,13,18,87,167,144,153,107,53,188,123,100,115,23,131,244,20,140,167,19,175,240,6,13,151,94,210,232,169,103,226,245,237,116,196,192,54,194,96,116,30,118,23,115,240,175,1,133,42,11,172,250,224,18,180,59,157,57,102,164,45,11,49,123,1,219,131,166,82,88,227,1,241,213,226,251,0,123,81,212,8,185,38,48,98,207,29,122,45,22,175,11,52,252,176,199,192,239,38,180,53,41,115,150,156,11,108,4,109,162,238,206,234,120,12,208,123,36,146,25,119,116,243,139,35,141,254,187,211,242,112,237,171,141,122,247,10,76,119,214,240,27,4,119,119,195,216,208,198,143,154,31,231,135,247,81,111,175,191,228,8,111,225,221,205,205,232,182,131,253,34,70,206,141,1,226,241,49,114,35,2,207,215,226,243,47,53,252,138,2,68,31,112,119,138,35,207,89,118,165,254,127,112,88,100,65,23,102,192,156,120,144,75,164,151,197,77,219,86,231,117,95,104,226,133,78,236,181,204,252,233,91,253,55,47,143,146,101,210,158,40,28,38,140,199,240,185,102,209,177,232,177,111,201,160,223,54,159,251,216,174,214,218,37,162,184,159,46,234,88,199,108,215,77,21,251,18,22,205,143,224,201,173,158,210,54,57,186,173,61,123,81,33,218,15,114,236,63,239,219,159,103,65,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("94a1827a-9241-4908-b110-6cc1dd10cabd"));
		}

		#endregion

	}

	#endregion

}

