namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecastDataMapperSchema

	/// <exclude/>
	public class ForecastDataMapperSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastDataMapperSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastDataMapperSchema(ForecastDataMapperSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("5f49ba06-6712-4c2c-9ad3-21e060b91318");
			Name = "ForecastDataMapper";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,173,87,89,111,27,55,16,126,86,128,252,7,86,1,210,21,106,172,128,62,182,182,138,198,135,162,52,78,12,75,200,75,81,24,244,46,101,179,216,93,110,72,174,13,35,240,127,239,12,239,61,148,180,69,94,36,145,115,112,206,111,70,13,173,153,106,105,193,200,155,171,203,173,216,235,252,84,52,123,126,215,73,170,185,104,242,11,33,89,65,149,254,244,243,203,23,95,94,190,152,117,138,55,119,100,251,164,52,171,127,29,156,65,180,170,88,129,114,42,95,179,134,73,94,140,120,222,243,230,115,188,140,143,214,181,104,224,30,40,203,229,146,28,171,174,174,169,124,90,185,243,149,20,15,188,100,138,212,76,223,139,82,17,45,72,77,91,178,119,230,145,146,106,154,123,225,101,34,221,118,183,21,47,72,81,81,165,136,247,230,12,184,47,105,219,50,9,28,232,214,236,149,100,119,96,55,1,239,149,166,141,86,191,192,155,252,129,106,102,108,154,181,246,64,10,164,19,165,37,90,191,147,140,125,16,96,214,150,181,20,2,38,36,57,33,243,155,155,243,179,245,249,205,205,220,186,51,123,197,154,210,106,119,103,247,212,165,117,229,192,67,15,130,151,228,130,87,21,4,181,171,155,79,180,234,152,202,54,49,196,199,59,122,91,49,75,93,129,93,248,173,142,200,181,120,36,82,60,30,25,227,12,11,58,187,129,208,19,14,31,11,98,220,157,97,224,104,113,79,178,68,139,83,66,184,255,165,60,247,1,246,123,94,149,145,59,63,197,179,100,77,144,154,61,80,73,180,145,96,85,5,177,105,216,35,217,133,179,231,154,89,125,167,16,73,224,49,90,115,115,248,9,130,57,135,79,175,31,238,142,250,50,155,50,72,108,202,64,91,75,209,181,94,221,132,172,161,91,81,75,77,100,167,53,94,179,66,200,210,208,32,184,64,113,132,103,44,101,99,14,58,84,88,47,145,3,207,234,55,47,158,95,112,169,244,71,121,198,246,180,171,116,6,28,54,34,43,226,126,230,87,208,45,2,94,200,207,63,119,180,82,89,176,108,225,149,204,94,191,14,220,222,251,192,237,12,94,44,188,65,124,79,50,99,207,15,16,246,174,170,98,82,102,33,35,185,169,42,176,56,43,5,180,9,91,20,225,210,171,177,122,140,246,221,83,203,48,2,39,161,141,76,179,168,252,227,237,223,80,146,70,204,218,101,57,147,23,147,39,223,82,101,131,169,224,93,45,147,151,158,125,76,189,7,14,82,66,245,231,191,151,101,22,52,121,79,45,187,249,124,238,183,208,184,3,214,76,143,46,51,215,49,222,92,201,116,39,27,91,170,35,5,206,163,164,16,242,157,216,26,52,200,22,174,90,70,181,226,238,79,105,139,125,235,174,141,75,142,178,81,166,34,189,128,61,121,169,36,0,174,131,222,115,165,93,247,67,28,86,153,173,16,91,138,131,16,56,160,130,132,213,70,0,157,216,148,217,186,227,229,159,127,17,0,45,6,80,183,41,1,55,240,138,72,103,186,143,5,38,63,50,97,234,123,165,228,66,229,165,146,80,216,220,216,212,32,8,240,242,138,74,141,14,68,117,56,105,10,170,51,116,9,140,249,226,213,60,59,105,167,221,186,144,191,19,188,201,198,128,123,228,85,47,82,247,191,13,185,102,42,88,98,111,222,64,133,192,112,185,103,102,186,152,90,243,88,152,247,198,138,149,66,35,106,210,192,12,61,153,227,4,154,175,118,32,218,31,74,199,75,195,21,133,172,95,106,21,161,156,136,61,88,192,224,41,201,246,39,243,4,99,231,203,213,241,210,11,152,196,218,113,118,112,14,128,253,48,216,146,43,149,165,67,207,152,228,243,135,137,1,55,29,223,184,184,172,74,159,204,48,2,28,246,52,123,145,12,12,227,170,211,20,234,3,31,104,13,174,245,193,216,98,93,254,1,226,150,95,179,182,130,245,35,155,147,249,17,194,189,111,107,83,53,216,114,39,137,141,67,28,165,136,160,248,110,201,60,18,198,247,2,22,98,21,91,85,67,40,116,15,196,177,100,253,9,184,149,206,8,103,116,50,20,156,83,241,197,72,9,173,62,246,56,50,185,113,121,56,240,113,40,169,11,73,77,182,105,133,213,254,150,151,165,17,244,83,98,146,62,156,81,73,28,17,73,205,58,208,3,81,7,185,206,46,195,116,40,52,211,211,179,159,230,41,112,28,135,102,199,117,21,130,178,81,96,122,170,194,156,35,245,188,228,182,41,163,248,161,169,228,89,211,145,228,21,33,237,178,103,171,191,137,79,253,159,136,123,105,111,84,223,72,23,234,30,56,58,144,139,169,73,97,236,43,200,4,64,232,224,9,59,207,116,202,247,67,168,84,200,161,223,64,46,98,226,127,6,183,225,76,253,87,16,55,20,10,64,55,36,76,192,157,77,10,33,135,65,115,176,237,58,92,220,138,78,22,70,113,175,67,71,166,140,0,210,45,20,1,22,225,220,199,68,7,59,147,219,8,110,34,174,41,71,219,127,88,242,205,130,159,246,111,207,220,97,119,15,43,45,114,30,44,54,127,129,139,131,154,216,131,138,152,222,189,20,181,159,148,184,244,226,191,176,241,223,176,137,194,66,102,40,171,68,242,171,133,24,23,7,47,100,23,134,31,149,223,41,14,87,227,119,45,176,205,121,211,213,76,226,101,178,133,89,23,28,0,140,246,43,210,159,60,88,4,144,67,188,182,158,175,113,227,123,243,100,55,118,152,105,102,17,247,139,228,34,223,50,52,52,187,147,173,249,95,129,28,223,222,79,135,75,95,186,237,121,77,249,31,236,105,98,111,77,201,211,123,104,224,216,9,108,11,191,131,46,194,185,183,195,161,175,135,246,51,123,7,132,127,0,225,222,157,85,139,16,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("5f49ba06-6712-4c2c-9ad3-21e060b91318"));
		}

		#endregion

	}

	#endregion

}

