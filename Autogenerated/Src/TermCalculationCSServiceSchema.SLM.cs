namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: TermCalculationCSServiceSchema

	/// <exclude/>
	public class TermCalculationCSServiceSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public TermCalculationCSServiceSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public TermCalculationCSServiceSchema(TermCalculationCSServiceSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("261d9b64-6c4f-428b-96aa-18536ce05a5c");
			Name = "TermCalculationCSService";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("50529f8b-8504-4b8d-9a81-5bda32bd1be4");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,221,87,75,111,27,55,16,62,175,1,255,7,86,185,172,0,97,117,79,109,3,242,22,41,84,212,141,32,169,8,80,35,7,106,119,36,111,179,75,110,73,174,10,161,240,127,207,12,31,218,135,37,57,9,122,242,37,17,135,195,111,30,252,230,227,90,240,10,116,205,51,96,247,139,135,149,220,154,36,149,98,91,236,26,197,77,33,69,178,6,85,165,188,204,154,210,174,87,160,246,69,6,215,87,255,93,95,69,141,46,196,142,173,14,218,64,245,243,96,157,120,207,7,153,67,121,113,51,153,101,166,216,91,244,203,126,159,96,211,58,180,217,42,72,62,240,204,72,85,128,126,185,143,135,208,167,170,44,56,238,190,83,176,195,72,44,45,185,214,239,217,160,188,116,229,35,178,247,236,158,107,56,150,27,77,167,83,118,163,155,170,226,234,112,231,215,22,131,201,45,211,254,80,214,34,49,157,61,65,222,148,144,179,156,27,96,92,228,204,20,21,176,13,47,185,200,64,7,204,105,7,244,209,199,195,43,48,10,107,250,76,182,153,174,255,0,131,53,212,8,188,41,202,194,28,150,240,79,83,40,168,64,24,29,119,23,212,40,118,203,94,57,66,94,137,55,228,99,10,82,55,155,178,200,88,102,11,250,230,158,16,7,142,13,125,0,243,36,115,108,233,194,98,209,214,176,103,174,105,178,193,20,152,2,172,143,206,217,166,80,119,56,211,178,108,90,155,145,108,228,99,205,145,11,163,201,113,185,192,163,180,92,168,2,111,221,28,70,201,49,90,183,155,206,82,115,197,43,38,144,230,183,35,133,53,131,54,163,187,165,251,193,182,82,117,47,10,120,94,22,2,116,114,51,181,199,90,20,5,166,81,66,223,205,4,147,155,191,33,51,204,60,113,195,50,188,40,94,8,141,43,56,81,82,175,160,155,105,0,33,212,199,143,53,184,17,235,94,118,244,136,124,157,139,189,252,2,177,107,40,222,230,104,241,113,181,198,122,239,101,126,88,153,67,73,55,140,110,15,160,53,223,193,209,154,124,82,188,174,33,159,48,95,221,7,169,42,204,177,235,236,76,201,111,90,138,9,133,139,150,56,252,82,104,184,236,107,57,18,72,226,47,129,88,18,78,179,95,193,116,204,113,207,197,117,218,183,126,204,44,105,162,61,87,204,116,120,134,247,112,235,230,201,205,242,33,65,200,155,46,19,165,74,27,109,100,5,202,163,223,197,22,41,138,4,252,139,172,18,218,168,134,142,206,212,174,33,154,199,163,63,113,46,113,67,224,117,97,159,177,131,125,195,120,242,26,128,110,233,55,207,241,188,47,34,200,146,179,191,14,83,123,158,246,48,2,121,17,192,157,31,147,120,69,209,47,168,22,107,34,16,205,21,98,89,142,88,195,45,11,123,201,130,43,13,113,128,90,14,60,95,34,57,98,122,148,126,223,147,240,147,240,250,56,19,230,50,27,10,2,213,200,113,136,49,112,11,156,34,215,43,161,221,235,49,204,32,12,194,255,158,193,170,3,124,42,3,55,114,140,174,230,20,111,29,25,113,10,122,13,234,246,203,95,110,55,14,122,116,235,177,14,207,54,220,51,253,243,154,242,57,169,168,80,54,232,157,114,111,2,160,16,129,221,169,241,117,16,254,209,248,110,89,155,5,118,89,97,107,3,229,160,232,153,162,88,231,165,205,83,37,36,134,185,22,165,197,48,92,237,192,184,140,222,138,136,149,18,75,68,137,89,218,122,245,186,200,190,208,75,218,46,46,232,150,235,145,245,194,88,68,45,66,139,61,227,200,3,191,3,64,228,92,33,32,54,191,167,113,167,191,178,210,51,7,6,146,151,164,72,77,3,115,203,126,252,76,232,239,198,125,121,107,165,38,197,87,27,101,198,229,87,108,227,179,233,253,132,229,52,101,25,138,237,206,111,163,50,56,46,207,42,209,170,231,231,35,70,47,78,211,127,127,73,129,133,108,37,117,98,15,202,144,45,238,123,14,5,59,73,27,165,80,81,201,154,4,140,32,17,145,255,100,236,97,255,46,177,214,144,70,255,222,98,186,180,241,185,86,208,243,227,108,132,183,170,185,120,145,91,168,121,142,92,9,122,48,78,44,188,11,248,220,85,160,78,240,239,147,138,174,32,12,198,250,168,31,52,219,104,205,92,123,126,76,59,214,22,182,85,15,238,191,91,183,40,214,172,230,141,190,32,29,139,174,104,189,21,137,56,242,21,169,64,191,103,212,137,5,53,226,91,133,34,239,157,194,160,23,232,140,65,252,50,196,125,139,130,146,15,59,114,105,254,194,155,59,104,126,251,213,211,94,194,153,105,60,49,135,253,12,218,81,124,135,105,184,191,100,112,69,150,158,225,250,10,77,95,1,134,60,161,97,43,15,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("261d9b64-6c4f-428b-96aa-18536ce05a5c"));
		}

		#endregion

	}

	#endregion

}

