define("AutoGeneratedPageUserTaskButtonViewModel", ["AutoGeneratedPageUserTaskButtonViewModelResources",
	"ProcessUserTaskConstants", "ProcessMiniEditPageMixin"
], function(resources, processUserTaskConstants) {

	/**
	 * Model button for the autogenerated page user task.
	 */
	Ext.define("BPMSoft.model.AutoGeneratedPageUserTaskButtonViewModel", {
		extend: "BPMSoft.BaseModel",
		alternateClassName: "BPMSoft.AutoGeneratedPageUserTaskButtonViewModel",

		Ext: null,
		BPMSoft: null,

		mixins: {
			processMiniEditPageMixin: "BPMSoft.ProcessMiniEditPageMixin"
		},

		columns: {
			"Id": {
				"dataValueType": BPMSoft.DataValueType.GUID
			},
			"Caption": {
				"dataValueType": BPMSoft.DataValueType.TEXT,
				"value": ""
			},
			"Name": {
				"dataValueType": BPMSoft.DataValueType.TEXT,
				"value": ""
			},
			"GenerateSignal": {
				"dataValueType": BPMSoft.DataValueType.TEXT,
				"value": ""
			},
			"IsEnabled": {
				"dataValueType": BPMSoft.DataValueType.BOOLEAN,
				"value": true
			},
			"PerformValidation": {
				"dataValueType": BPMSoft.DataValueType.BOOLEAN,
				"value": false
			},
			"Style": {
				"dataValueType": BPMSoft.DataValueType.LOOKUP,
				"value": {
					"value": BPMSoft.controls.ButtonEnums.style.TRANSPARENT_ORANGE,
					"displayValue": BPMSoft.Resources.Controls.Button.ButtonStyleTransparent_orange
				}
			},
			"StyleCollection": {
				"dataValueType": BPMSoft.DataValueType.COLLECTION
			},
			"Enabled": {
				"dataValueType": BPMSoft.DataValueType.BOOLEAN,
				"value": false
			},
			"Visible": {
				"dataValueType": BPMSoft.DataValueType.BOOLEAN,
				"value": true
			},
			"ParameterEditToolsButtonMenu": {
				"dataValueType": BPMSoft.DataValueType.COLLECTION,
				"value": Ext.create("BPMSoft.BaseViewModelCollection")
			},
			"IsValid": {
				"dataValueType": BPMSoft.DataValueType.BOOLEAN,
				"value": false
			},
			/**
			 * Parent module instance.
			 */
			"ParentModule": {
				dataValueType: BPMSoft.DataValueType.CUSTOM_OBJECT
			}
		},

		//region Methods: Protected

		/**
		 * @inheritdoc BPMSoft.BaseModel#constuctor
		 * @protected
		 */
		constructor: function() {
			this.callParent(arguments);
			this.initStyleCollection();
		},

		/**
		 * Initialize style collection.
		 * @protected
		 */
		initStyleCollection: function() {
			var styleCollection = Ext.create("BPMSoft.Collection");
			var buttonStyles = BPMSoft.controls.ButtonEnums.style;
			BPMSoft.each(buttonStyles, function(code) {
				var item = this.getStyle(code);
				styleCollection.add(code, item);
			}, this);
			this.set("StyleCollection", styleCollection);
		},

		/**
		 * Convert server object to view model attributes.
		 * @protected
		 * @param {Object} values Object.
		 */
		convertServerObjectToViewModelAttributes: function(values) {
			this.set("Id", values.Id);
			this.set("IsEnabled", values.isEnabled);
			this.set("PerformValidation", values.performValidation);
			this.set("Caption", values.caption);
			this.set("Name", values.name);
			this.set("Style", this.getStyle(values.style));
			this.set("GenerateSignal", values.generateSignal);
			this.set("Enabled", values.enabled);
			this.set("ParentCollection", this.parentCollection);
		},

		/**
		 * Returns style value and display value by enum value.
		 * @protected
		 * @param {String} style Style.
		 * @return {Object} Value and display value style.
		 */
		getStyle: function(style) {
			var styleEnum = BPMSoft.controls.ButtonEnums.style;
			if (_.values(styleEnum).indexOf(style) === -1) {
				style = styleEnum.DEFAULT;
			}
			return {
				value: style,
				displayValue: BPMSoft.Button.getStyleCaption(style)
			};
		},

		/**
		 * Convert view model attributes to server object.
		 * @protected
		 * @return {Object} Server style object.
		 */
		convertViewModelAttributesToServerObject: function() {
			var style = this.get("Style") ? this.get("Style").value : null;
			var obj = {
				$type: processUserTaskConstants.SERVER_GENERIC_DICTIONARY,
				Id: this.get("Id"),
				isEnabled: this.get("IsEnabled"),
				performValidation: this.get("PerformValidation"),
				caption: this.get("Caption"),
				name: this.get("Name"),
				style: style,
				generateSignal: this.get("GenerateSignal")
			};
			return obj;
		},

		/**
		 * @inheritdoc BPMSoft.ProcessMiniEditPageMixin#getProcessMiniEditPageName
		 * @protected
		 */
		getProcessMiniEditPageName: function() {
			return "AutoGeneratedPageUserTaskButtonMiniEditPage";
		},

		/**
		 * @inheritdoc BPMSoft.ProcessMiniEditPageMixin#getActiveItemEditName
		 * @protected
		 */
		getActiveItemEditName: function() {
			return "ProcessButtonEditName";
		},

		/**
		 * @inheritdoc BPMSoft.ProcessMiniEditPageMixin#getProcessMiniEditPageId
		 * @protected
		 */
		getProcessMiniEditPageId: function() {
			return this.sandbox.id + "buttonedit";
		},

		/**
		 * @inheritdoc BPMSoft.ProcessMiniEditPageMixin#getAddButtonEnabledProperyName
		 * @protected
		 */
		getAddButtonEnabledProperyName: function() {
			return "IsButtonToolsButtonEnabled";
		},

		/**
		 * Returns marker value for button.
		 * @protected
		 * @return {String} markerValue of button.
		 */
		getMarkerValue: function() {
			var caption = this.get("Caption");
			var parentCollection = this.parentCollection;
			var currentIndex = parentCollection.indexOf(this);
			var markerValue = Ext.String.format("{0}-{1}", caption, currentIndex);
			return markerValue;
		}

		//endregion
	});

	return BPMSoft.AutoGeneratedPageUserTaskButtonViewModel;
});
