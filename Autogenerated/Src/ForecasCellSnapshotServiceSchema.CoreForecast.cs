namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecasCellSnapshotServiceSchema

	/// <exclude/>
	public class ForecasCellSnapshotServiceSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecasCellSnapshotServiceSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecasCellSnapshotServiceSchema(ForecasCellSnapshotServiceSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("0a4e18d5-1a74-0dac-6ca8-5600330c0b01");
			Name = "ForecasCellSnapshotService";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,181,87,219,142,219,54,16,125,118,128,252,195,212,1,2,25,48,180,64,31,227,149,131,141,55,78,13,228,178,168,209,188,20,65,192,149,70,54,81,153,114,73,202,129,145,248,223,59,20,73,221,44,217,89,180,221,7,175,56,154,27,207,153,25,145,130,237,80,237,89,140,240,230,225,195,58,79,117,184,200,69,202,55,133,100,154,231,34,92,230,18,99,166,244,231,95,159,63,251,254,252,217,168,80,92,108,96,125,84,26,119,164,154,101,24,27,61,21,190,67,129,146,199,179,174,206,123,46,254,174,133,117,144,221,46,23,125,114,137,253,210,112,201,98,157,75,142,138,222,147,198,11,137,27,10,12,139,140,41,245,10,92,158,11,204,178,183,66,115,125,92,11,182,87,219,92,175,81,30,120,140,165,205,205,205,13,220,170,98,183,99,242,56,119,107,247,30,210,92,130,98,7,19,86,57,211,82,150,58,0,32,38,215,42,244,94,110,26,110,254,188,199,148,21,153,126,195,69,66,246,129,62,238,49,79,131,149,199,174,55,161,201,20,62,18,246,16,193,216,36,173,198,147,47,228,106,95,60,102,60,134,216,108,170,185,167,142,49,188,130,203,222,201,21,177,69,191,21,78,75,142,89,66,64,61,72,126,96,218,226,49,218,219,5,172,222,161,246,254,76,184,223,113,159,43,78,112,31,225,43,193,94,176,134,100,214,50,92,9,133,114,208,118,203,149,225,44,102,153,213,27,242,114,33,124,237,98,200,216,91,174,45,35,84,148,197,78,44,88,22,23,25,35,109,248,170,250,95,216,58,26,189,64,145,88,140,28,38,150,130,97,240,131,63,104,43,212,37,194,150,62,20,173,229,4,76,155,140,70,29,165,168,163,86,110,225,212,166,232,65,230,123,2,137,74,220,208,148,107,210,196,196,19,229,150,208,241,219,89,126,135,13,234,25,40,243,115,234,154,86,64,185,253,220,51,205,192,47,250,76,187,208,244,38,90,194,213,13,117,149,148,33,185,5,143,50,113,79,35,137,186,144,98,144,68,120,253,218,234,141,130,65,149,200,14,9,59,64,142,52,169,244,237,181,252,230,193,100,82,82,100,56,162,95,85,39,116,33,204,129,101,5,54,204,78,173,138,186,80,229,119,101,143,149,115,160,33,29,196,162,219,146,4,2,4,231,210,190,125,15,230,48,15,198,54,139,241,212,1,42,240,27,80,105,41,45,11,227,224,78,110,138,29,10,29,140,219,149,60,158,118,138,112,210,3,93,79,206,30,46,120,26,84,191,85,243,128,116,174,34,198,83,2,166,111,132,64,20,129,40,178,204,183,43,241,218,175,246,68,12,109,122,199,10,196,127,129,226,172,42,236,222,204,152,130,149,111,222,73,184,198,86,91,7,213,27,231,229,212,174,160,193,169,218,38,109,0,146,11,196,93,252,30,212,220,89,181,167,210,215,253,136,92,36,241,92,185,135,202,75,233,254,255,108,158,165,248,31,113,218,251,177,29,98,182,7,167,30,126,135,62,5,31,80,111,243,193,115,133,1,148,78,30,34,49,15,193,234,173,32,180,36,123,204,240,214,8,230,80,103,81,150,194,212,26,216,81,97,30,61,177,110,139,29,245,112,201,165,210,159,164,59,126,5,230,132,6,145,57,145,209,159,89,132,15,116,36,205,147,85,98,10,165,246,90,139,95,190,108,40,219,129,126,166,92,137,91,202,246,212,117,166,236,197,150,162,83,27,141,123,158,166,110,227,84,124,102,213,3,73,237,140,224,184,138,152,7,232,192,36,196,91,38,54,88,66,173,136,68,83,170,239,73,219,26,6,174,104,204,113,150,197,91,8,58,72,3,23,205,208,85,71,61,230,121,230,61,147,211,148,101,202,125,225,202,152,54,157,99,233,33,170,153,62,227,181,65,233,172,110,237,150,117,183,149,219,174,107,7,190,145,234,164,168,25,177,221,18,245,59,255,244,227,71,51,215,240,179,169,112,248,165,197,93,41,107,100,231,76,235,140,154,0,135,119,73,18,156,239,202,198,183,191,6,159,132,72,118,92,52,216,119,14,23,68,133,110,102,89,122,182,30,102,205,186,55,94,102,79,106,198,198,161,172,123,233,177,183,30,118,64,213,185,219,212,247,158,60,45,67,162,68,65,119,141,71,212,223,16,125,121,0,19,9,208,28,213,181,122,117,51,58,191,26,89,201,158,73,182,3,65,215,157,104,236,173,198,243,234,228,185,67,205,18,26,112,225,237,77,169,217,111,152,242,76,163,28,207,151,229,127,136,91,215,212,166,165,251,20,29,114,158,148,251,244,113,130,222,243,175,207,103,10,214,177,189,254,130,141,230,185,247,74,225,98,139,241,95,126,234,127,164,122,13,76,114,116,217,243,26,126,208,87,22,235,45,226,79,216,89,61,111,93,65,19,85,249,205,170,154,82,70,179,241,198,154,214,239,45,153,81,255,161,210,124,246,74,81,80,186,153,250,141,206,42,243,78,239,146,163,75,71,174,235,254,76,37,121,79,126,236,149,41,78,207,134,153,53,186,114,74,8,27,82,31,180,138,17,186,158,106,205,223,78,187,88,105,91,72,178,127,0,43,139,114,80,10,17,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("0a4e18d5-1a74-0dac-6ca8-5600330c0b01"));
		}

		#endregion

	}

	#endregion

}

