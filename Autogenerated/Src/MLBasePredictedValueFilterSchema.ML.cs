namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: MLBasePredictedValueFilterSchema

	/// <exclude/>
	public class MLBasePredictedValueFilterSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public MLBasePredictedValueFilterSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public MLBasePredictedValueFilterSchema(MLBasePredictedValueFilterSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("483dda1b-7930-4626-9dc7-57f2d131894d");
			Name = "MLBasePredictedValueFilter";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("55d0c38a-eaf5-44ed-bcf3-8e3362908804");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,141,84,77,111,219,48,12,61,187,64,255,3,225,94,90,32,141,239,109,226,67,131,117,40,16,111,197,178,237,174,216,180,35,64,150,12,73,110,225,21,251,239,35,173,36,141,157,52,235,33,138,245,196,143,167,71,82,90,212,232,26,145,35,60,60,103,43,83,250,233,194,232,82,86,173,21,94,26,61,205,150,151,23,111,151,23,81,235,164,174,96,213,57,143,245,253,126,95,41,179,22,234,238,110,97,234,154,140,151,166,170,8,126,63,127,143,201,231,167,112,139,167,209,233,23,237,165,151,232,142,143,179,229,244,73,123,180,37,177,230,99,50,184,178,88,17,91,88,40,225,220,29,100,203,7,225,240,217,98,33,115,143,197,111,161,90,124,148,138,124,122,235,36,73,96,230,218,186,22,182,75,183,123,118,128,130,176,14,54,66,23,10,45,148,198,2,50,139,14,74,137,170,128,38,4,228,68,100,66,32,71,100,102,47,156,96,186,139,156,28,132,110,218,181,146,57,228,204,235,44,173,136,68,166,117,127,147,71,206,72,87,121,182,198,35,91,135,227,49,245,30,248,185,65,80,36,61,90,230,112,76,34,106,118,65,192,121,42,107,14,22,69,97,180,234,224,137,74,6,252,155,243,154,9,45,56,202,87,244,92,74,180,215,113,182,140,111,130,198,209,21,234,34,176,27,82,37,138,13,90,174,213,17,221,247,196,191,28,90,234,44,77,59,246,25,109,223,160,66,127,15,142,150,191,231,147,145,147,243,182,205,189,177,156,174,151,247,140,52,79,154,154,72,40,249,7,29,8,208,248,10,146,252,133,166,126,55,37,120,18,110,230,16,33,183,88,206,227,83,245,89,161,167,250,196,73,26,106,248,129,192,61,210,8,43,106,208,52,80,243,184,29,220,47,78,185,68,140,65,190,7,167,179,164,247,8,21,10,125,242,113,135,92,143,20,27,38,184,1,158,209,40,26,25,205,71,102,60,75,209,127,4,206,208,111,76,241,25,109,23,66,41,170,236,235,6,245,112,78,52,18,236,13,172,145,43,202,213,95,119,187,225,161,205,126,90,62,35,100,8,28,4,12,223,3,221,142,236,115,163,218,90,247,194,125,35,32,78,121,221,213,58,28,110,9,156,13,99,209,181,202,135,180,99,230,71,142,22,125,107,181,75,103,121,74,173,137,179,36,79,225,22,100,25,236,161,22,221,129,20,164,75,175,210,4,80,209,147,115,11,228,85,10,250,100,55,138,189,11,118,208,21,47,210,250,86,40,88,27,163,224,187,166,150,108,155,97,143,92,247,175,101,183,85,104,66,99,222,191,75,35,49,38,225,125,148,165,204,251,199,253,71,127,73,122,12,248,111,215,66,33,63,240,69,206,180,75,64,135,32,97,255,0,45,87,253,169,78,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("483dda1b-7930-4626-9dc7-57f2d131894d"));
		}

		#endregion

	}

	#endregion

}

