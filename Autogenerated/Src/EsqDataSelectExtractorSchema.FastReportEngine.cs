namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: EsqDataSelectExtractorSchema

	/// <exclude/>
	public class EsqDataSelectExtractorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public EsqDataSelectExtractorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public EsqDataSelectExtractorSchema(EsqDataSelectExtractorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("479ad307-f341-43d0-a57b-17863df0d694");
			Name = "EsqDataSelectExtractor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("907f2de3-5104-49b3-a54a-bb8730240b72");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,173,84,219,110,219,48,12,125,118,129,254,3,135,190,56,64,160,15,232,178,2,93,154,20,197,144,45,107,118,121,28,20,135,137,53,56,178,39,201,109,141,97,255,62,74,242,77,174,211,109,192,94,28,144,58,36,15,15,201,72,126,68,93,240,4,225,237,122,181,201,247,134,205,115,185,23,135,82,113,35,114,201,238,177,200,149,17,242,192,150,92,27,111,45,228,65,72,100,11,253,227,252,236,231,249,89,84,106,122,135,77,165,13,30,95,15,108,74,151,101,152,216,92,154,221,162,68,37,146,14,243,247,53,199,98,20,142,123,217,66,26,97,4,234,231,207,93,234,27,110,248,38,47,85,130,236,122,171,141,226,158,35,133,80,208,133,194,3,89,48,207,184,214,151,64,157,58,56,218,78,22,79,14,156,43,135,44,202,109,38,18,72,44,240,4,14,46,225,110,196,61,243,92,58,30,129,8,51,202,245,34,192,186,175,166,97,201,43,34,68,3,161,111,219,193,82,96,182,163,22,214,74,60,112,131,254,177,240,6,40,228,187,92,102,21,124,214,168,40,187,244,131,130,111,101,96,123,77,162,11,148,59,159,53,44,65,64,210,175,180,61,217,66,78,144,186,142,23,103,92,150,120,80,52,172,57,1,187,89,81,52,160,2,111,6,56,59,226,232,215,203,4,87,104,210,252,164,8,110,89,170,77,146,226,145,127,44,81,85,48,39,93,12,18,235,175,194,164,180,191,229,81,174,120,17,59,62,81,211,140,195,3,246,173,169,71,220,221,147,172,31,72,214,27,225,40,114,85,205,72,32,90,186,41,228,219,239,118,78,80,112,69,135,103,80,233,58,40,47,13,140,224,253,239,21,36,13,139,70,151,7,174,108,113,210,67,226,227,243,30,226,129,110,172,143,88,113,201,15,168,166,33,123,246,158,24,77,156,158,81,91,174,206,127,154,89,92,71,236,233,238,120,146,66,108,137,249,112,16,114,80,193,107,169,155,30,186,50,236,122,183,139,189,197,222,97,229,152,89,159,15,104,94,190,240,172,68,182,230,38,157,244,201,210,244,233,107,35,62,169,138,130,150,34,35,97,151,42,63,250,3,90,183,90,15,85,153,246,230,80,39,83,104,74,229,120,255,219,102,253,97,235,161,94,251,248,63,28,61,201,219,115,53,147,0,237,52,118,186,212,250,138,61,196,175,2,176,251,215,99,126,26,218,202,117,139,198,169,26,119,209,83,176,187,88,239,87,55,188,73,59,53,147,170,252,209,175,221,83,130,133,205,219,108,129,31,69,183,155,39,46,41,188,154,176,31,154,111,123,26,45,147,110,253,131,41,57,14,125,153,109,102,155,47,64,143,207,208,123,67,39,249,126,3,81,88,55,52,16,7,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("479ad307-f341-43d0-a57b-17863df0d694"));
		}

		#endregion

	}

	#endregion

}

