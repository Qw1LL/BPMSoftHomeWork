namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: QuartzJobTriggerManagerSchema

	/// <exclude/>
	public class QuartzJobTriggerManagerSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public QuartzJobTriggerManagerSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public QuartzJobTriggerManagerSchema(QuartzJobTriggerManagerSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("17998df5-3de6-4007-ab26-adbd4f0f1f38");
			Name = "QuartzJobTriggerManager";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("79d5e1e4-18af-4001-8dc1-26f09fca92c2");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,205,87,89,111,227,54,16,126,214,2,251,31,6,222,23,7,200,42,239,77,236,197,54,105,3,23,200,209,58,69,31,23,180,60,178,153,72,162,64,145,241,166,139,252,247,14,47,137,178,124,36,40,80,52,15,145,68,206,241,205,61,174,88,137,77,205,50,132,159,239,111,230,34,87,233,165,168,114,190,210,146,41,46,170,143,31,126,124,252,144,232,134,87,43,152,191,52,10,203,243,173,111,162,47,10,204,12,113,147,94,99,133,146,103,29,205,239,154,73,245,247,246,119,58,43,235,34,125,144,124,181,66,217,116,183,29,132,178,20,213,174,115,137,233,60,91,227,82,23,40,233,158,40,62,73,92,145,110,184,44,88,211,252,4,191,137,133,51,192,94,214,122,81,240,12,50,115,23,95,37,100,21,253,239,152,9,188,98,149,34,1,247,146,63,51,133,238,190,118,31,144,153,123,104,148,52,104,72,206,181,20,186,158,235,60,231,223,97,2,35,251,57,114,120,146,79,88,45,157,216,129,14,37,117,166,132,52,90,44,48,175,196,129,108,225,141,79,192,56,61,121,221,115,237,97,212,82,100,216,52,183,20,192,211,0,109,35,228,147,141,102,239,84,55,40,221,193,236,138,219,72,49,249,114,225,46,79,65,44,30,41,124,83,168,153,36,26,69,1,241,250,147,72,67,122,185,198,236,233,171,92,233,18,43,117,171,139,226,78,254,82,214,234,101,60,138,168,70,39,38,102,73,210,131,113,128,181,71,23,152,3,218,3,124,129,36,176,220,119,16,40,28,17,32,119,61,71,21,98,54,246,28,127,197,154,137,167,135,196,145,252,233,149,208,109,208,231,181,181,142,50,202,218,143,243,40,102,251,114,128,128,214,40,21,199,173,20,56,59,59,131,139,70,151,37,5,102,234,173,129,202,56,225,226,44,28,71,185,224,227,26,155,253,3,86,168,206,161,49,255,94,7,34,31,214,104,197,129,200,65,209,251,202,248,2,148,128,205,154,103,107,123,68,30,130,5,22,162,90,53,7,149,6,79,30,209,104,196,29,53,128,136,134,224,201,169,215,154,47,211,91,220,152,231,248,36,125,16,115,75,239,131,215,211,211,6,18,120,229,173,241,241,135,82,83,205,46,144,148,81,207,193,229,65,36,253,124,56,238,76,147,17,64,1,221,172,69,131,164,100,205,138,188,85,188,225,69,241,86,197,109,150,29,214,57,163,184,73,77,21,28,66,133,223,49,211,36,28,114,41,74,23,219,76,75,73,149,98,177,237,214,185,16,162,128,89,227,26,183,209,252,6,75,187,4,39,221,76,181,198,213,212,82,73,61,229,144,129,228,77,223,173,246,80,215,137,138,105,11,203,0,77,119,128,100,172,196,124,50,34,79,220,213,118,244,140,206,166,190,205,111,184,90,195,35,185,136,72,236,12,139,76,72,91,25,125,156,190,205,119,226,224,219,99,251,126,222,239,194,129,34,122,117,237,146,208,195,100,26,115,194,151,47,48,142,191,39,17,87,122,133,57,211,133,242,29,169,25,114,79,224,153,21,26,223,210,88,110,80,173,197,114,223,248,122,22,124,9,189,46,232,33,183,197,60,241,249,104,166,127,198,212,56,106,45,167,91,3,239,228,0,30,119,186,117,184,53,161,221,10,64,50,253,252,191,97,21,163,199,112,94,239,37,52,211,59,73,98,243,127,229,88,236,181,158,202,80,145,80,202,134,165,168,138,23,159,122,80,136,236,233,206,189,78,160,194,141,63,247,77,102,139,121,15,22,248,198,237,226,144,153,32,253,235,198,127,105,19,150,154,66,16,106,122,154,89,128,10,84,54,141,21,229,112,5,172,162,178,91,27,115,62,55,44,71,40,197,114,111,155,61,8,126,22,212,116,249,235,222,18,158,83,222,182,40,38,228,31,26,191,33,105,146,196,184,14,198,157,3,187,155,99,156,73,18,93,90,175,239,1,23,6,181,249,147,168,52,217,29,251,218,93,216,142,213,61,253,99,55,249,235,251,170,72,40,178,11,151,33,209,234,112,0,51,130,122,133,138,241,2,174,81,185,58,161,163,113,187,159,153,222,227,222,130,217,30,208,215,186,110,119,215,212,198,26,125,153,25,254,150,43,245,83,241,20,122,71,182,2,227,179,184,68,157,225,221,93,111,156,197,76,97,220,244,4,181,237,49,62,141,199,196,22,20,223,159,122,141,32,114,144,15,164,113,143,127,13,43,171,114,159,189,229,212,174,34,238,132,211,240,42,121,147,115,137,38,53,205,178,76,122,182,188,104,114,102,206,233,247,3,122,225,230,183,196,184,39,185,21,73,172,112,51,16,72,137,55,212,2,175,239,107,179,251,106,248,15,77,141,155,129,98,205,19,228,66,2,47,75,92,114,211,73,68,133,159,21,47,253,90,96,54,177,221,67,211,138,179,35,203,142,245,201,168,245,253,104,218,181,17,43,60,243,63,213,48,172,5,36,202,114,198,77,224,153,75,165,89,225,134,0,193,243,110,59,146,179,189,100,141,88,254,15,105,218,75,188,161,247,141,47,2,118,179,42,25,79,133,213,204,173,77,20,202,255,216,233,17,158,93,94,63,150,251,207,76,218,149,102,210,246,236,180,215,124,186,240,157,183,244,81,73,192,177,149,58,102,8,11,193,48,172,3,82,162,138,241,132,106,239,21,99,44,245,116,151,137,78,106,47,223,90,161,177,219,8,79,43,237,189,59,8,229,202,63,55,172,245,47,233,16,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("17998df5-3de6-4007-ab26-adbd4f0f1f38"));
		}

		#endregion

	}

	#endregion

}

