namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: DateTimeColumnProcessorSchema

	/// <exclude/>
	public class DateTimeColumnProcessorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public DateTimeColumnProcessorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public DateTimeColumnProcessorSchema(DateTimeColumnProcessorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("06b79045-dff3-4417-9552-df56bd39d8fb");
			Name = "DateTimeColumnProcessor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("52abf94a-4a51-4e9b-afae-86480a04ff1e");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,221,86,75,111,219,56,16,62,187,64,255,195,172,247,34,3,134,124,207,195,65,234,212,129,177,219,108,16,59,237,161,232,129,150,70,9,1,74,20,72,42,141,55,201,127,239,240,33,91,244,35,91,96,211,75,115,112,164,209,188,190,111,190,145,88,177,18,117,205,50,132,15,215,159,230,178,48,233,68,86,5,191,107,20,51,92,86,233,148,11,156,149,181,84,230,253,187,167,247,239,122,141,230,213,29,204,87,218,96,121,188,117,159,94,10,185,100,130,255,235,66,119,158,46,240,209,164,55,120,215,8,166,62,62,214,10,181,38,55,189,241,219,116,160,112,191,53,157,178,204,72,197,209,70,145,199,159,10,239,40,7,76,4,211,250,8,46,152,193,5,47,113,34,69,83,86,215,74,102,84,67,42,231,58,26,141,224,132,87,247,168,184,201,101,6,153,194,226,180,127,37,171,107,84,154,83,131,149,217,10,123,90,220,160,110,132,121,233,143,198,109,2,221,148,37,83,171,246,222,254,157,87,192,43,109,88,69,28,202,2,204,61,215,144,217,126,128,46,8,100,77,24,249,82,32,20,82,65,237,147,91,92,109,179,144,185,178,240,192,68,131,58,109,43,141,58,165,190,94,96,193,168,147,15,188,202,41,52,49,171,26,101,145,204,182,26,30,12,225,138,198,9,167,80,209,63,114,56,192,199,96,240,141,146,214,205,82,240,44,180,122,192,19,142,224,53,134,78,218,176,179,241,16,182,187,161,18,36,24,250,221,76,137,152,48,170,177,19,164,97,93,187,250,222,227,127,15,103,103,58,235,241,76,20,82,147,58,158,17,241,71,222,136,161,208,1,244,148,218,142,99,119,30,222,82,51,197,74,71,245,105,191,209,168,8,94,133,153,149,126,127,124,75,247,52,216,214,144,158,140,156,183,11,14,196,31,40,154,220,70,169,32,206,60,176,9,122,71,176,100,26,147,173,71,240,4,47,129,112,172,114,207,121,60,0,42,82,163,50,180,62,68,191,146,134,2,49,127,171,9,212,109,66,144,15,168,20,207,17,46,27,158,91,156,236,179,213,246,130,88,191,157,229,112,58,142,109,105,203,196,182,231,241,235,104,62,161,185,151,185,131,194,31,40,69,7,200,62,33,44,236,107,3,140,108,119,208,47,220,16,72,254,77,105,23,146,27,187,177,109,51,63,59,121,151,165,63,190,97,223,125,194,104,212,59,222,36,9,34,135,72,250,28,194,28,133,135,34,21,154,70,85,122,28,56,183,77,42,23,64,174,237,51,79,189,35,0,150,82,10,194,185,10,254,174,198,185,110,17,37,180,124,54,69,192,45,27,179,6,123,6,113,99,164,37,39,180,216,106,95,44,141,16,246,213,220,235,185,90,190,27,178,175,89,179,213,153,34,113,134,42,177,154,211,73,163,20,73,201,90,233,90,16,4,28,186,116,189,54,195,220,172,4,189,6,207,237,84,240,111,153,49,1,207,176,253,80,8,249,253,203,61,55,56,183,159,46,29,131,129,60,92,12,124,167,188,128,196,55,234,183,103,23,85,27,224,253,61,179,1,155,51,189,188,141,180,114,73,155,255,59,9,203,225,121,91,89,5,81,204,170,66,66,230,197,18,76,228,246,223,98,242,73,66,71,153,183,205,107,204,120,193,179,182,24,29,65,240,145,14,34,181,32,237,180,58,237,127,29,166,223,250,65,139,113,225,244,170,41,151,168,166,82,149,204,132,155,11,74,89,50,49,71,75,44,125,207,6,251,150,34,204,123,189,18,251,250,241,132,121,79,144,231,150,185,93,217,6,218,214,59,178,22,108,119,243,166,74,150,255,184,4,73,148,103,29,245,23,157,30,214,145,238,102,135,209,75,52,51,61,165,15,38,181,249,177,98,212,83,158,244,253,241,175,155,229,182,210,30,3,230,253,176,83,189,51,232,122,164,29,151,224,112,20,59,184,213,222,234,16,132,53,94,236,1,231,57,91,217,200,164,133,48,140,192,180,104,119,180,21,229,244,78,47,175,239,249,79,124,112,126,253,183,115,179,67,19,143,200,225,73,252,48,124,58,143,208,31,31,163,253,178,167,131,52,10,235,58,29,119,119,196,201,159,88,234,56,164,238,215,123,89,17,254,145,28,218,252,206,202,63,48,119,222,137,150,253,249,217,143,228,240,23,169,147,96,43,120,16,116,21,134,180,121,65,4,67,236,238,30,237,159,158,183,198,70,178,253,0,13,25,225,245,248,12,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("06b79045-dff3-4417-9552-df56bd39d8fb"));
		}

		#endregion

	}

	#endregion

}

