namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: EmailTemplateUserTaskLanguageIteratorSchema

	/// <exclude/>
	public class EmailTemplateUserTaskLanguageIteratorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public EmailTemplateUserTaskLanguageIteratorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public EmailTemplateUserTaskLanguageIteratorSchema(EmailTemplateUserTaskLanguageIteratorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("b1b6547c-26c7-4f78-8568-0564e77cfd42");
			Name = "EmailTemplateUserTaskLanguageIterator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("6b752d82-945c-4729-b067-d3f384b1bc2d");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,213,85,203,110,218,64,20,93,59,82,254,225,202,217,16,41,130,61,193,142,82,26,33,164,70,66,77,178,170,170,106,176,175,97,212,241,216,154,7,21,173,242,239,189,227,23,126,64,235,77,23,93,0,158,203,153,51,103,206,125,88,178,20,117,206,34,132,15,155,231,151,44,49,211,101,38,19,190,179,138,25,158,201,235,171,95,215,87,158,213,92,238,224,229,168,13,166,247,189,53,225,133,192,200,129,245,116,133,18,21,143,78,152,19,169,66,138,82,252,70,225,142,176,176,20,76,235,57,60,165,140,139,87,76,115,193,12,190,105,84,175,76,127,255,196,228,206,178,29,174,13,146,140,76,21,27,103,179,25,44,180,77,83,166,142,97,181,174,1,144,208,71,112,109,220,153,219,35,160,99,5,83,209,130,37,94,48,68,12,162,98,214,211,154,113,214,162,204,237,86,240,8,34,39,109,156,50,152,195,122,168,214,35,211,232,187,185,235,70,101,57,42,195,145,46,188,41,206,40,255,239,95,169,8,184,163,32,202,164,44,77,117,66,135,74,107,169,14,188,108,176,253,165,203,157,231,237,208,184,132,120,158,174,30,222,203,211,115,197,15,206,157,230,2,159,173,192,47,95,225,155,104,173,245,253,69,161,143,74,177,35,100,73,99,42,40,183,225,146,96,149,25,146,133,241,224,188,246,82,159,52,67,16,246,164,192,195,3,76,122,161,0,36,254,232,83,22,20,46,9,238,199,115,128,179,201,36,167,12,139,76,123,239,164,235,224,237,221,223,56,168,9,30,227,148,203,55,201,71,19,125,196,132,89,241,71,120,137,126,191,109,18,119,198,141,0,14,76,88,108,167,244,6,101,92,214,92,183,0,137,89,27,101,35,170,206,49,37,184,166,203,112,38,248,79,58,197,9,230,180,155,73,154,17,148,236,133,70,132,72,97,18,248,163,58,196,159,133,83,56,95,18,69,36,103,138,165,32,105,12,5,190,237,152,224,135,253,86,88,204,10,116,187,1,70,105,232,185,91,204,131,150,217,85,205,245,64,65,15,214,246,249,191,117,109,176,185,104,89,63,44,43,202,77,81,141,197,52,167,57,122,154,149,255,198,247,187,193,36,40,196,84,181,63,7,179,231,122,114,62,85,221,145,17,148,27,199,52,194,51,154,125,22,143,233,129,21,26,125,178,192,189,84,162,114,92,0,143,81,26,158,112,84,23,70,221,208,100,140,50,21,175,99,63,92,14,57,22,253,244,40,52,86,73,29,62,73,155,86,111,153,214,144,117,217,168,17,173,124,172,43,244,86,224,98,101,121,28,186,11,212,54,233,137,11,65,45,163,118,145,210,141,44,218,195,228,192,84,97,33,149,108,119,26,215,72,239,200,81,56,2,119,110,1,165,87,125,67,191,142,39,13,117,57,176,40,11,151,82,81,70,187,193,247,223,125,252,108,64,134,8,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("b1b6547c-26c7-4f78-8568-0564e77cfd42"));
		}

		#endregion

	}

	#endregion

}

