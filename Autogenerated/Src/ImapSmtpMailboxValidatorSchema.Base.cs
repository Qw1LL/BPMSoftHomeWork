namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ImapSmtpMailboxValidatorSchema

	/// <exclude/>
	public class ImapSmtpMailboxValidatorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ImapSmtpMailboxValidatorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ImapSmtpMailboxValidatorSchema(ImapSmtpMailboxValidatorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("dc6e3865-0e37-42ce-a08e-3cabc6196187");
			Name = "ImapSmtpMailboxValidator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("5e01e2a5-733f-47cc-a4c2-452cdff090f0");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,149,85,201,110,219,48,16,61,43,64,255,129,80,47,18,106,200,247,56,49,144,173,173,128,186,49,96,183,151,182,7,70,26,217,4,36,82,32,169,36,110,145,127,239,112,179,228,13,112,46,6,61,243,102,123,179,136,211,6,84,75,11,32,183,243,217,66,84,58,187,19,188,98,171,78,82,205,4,255,112,241,239,195,69,212,41,198,87,228,161,161,172,70,173,150,180,208,217,253,242,113,178,85,229,92,195,202,89,220,180,44,155,33,240,73,188,222,11,180,224,231,161,50,163,148,21,38,162,206,52,152,137,18,234,30,219,167,47,225,184,52,251,140,121,11,201,134,17,130,222,184,62,46,205,22,192,75,144,168,68,245,71,9,43,76,134,220,213,84,169,75,146,55,180,93,52,186,245,137,253,164,53,43,41,134,176,216,241,120,76,174,84,215,52,84,110,166,219,255,0,164,144,80,93,199,249,190,81,60,158,18,214,180,53,52,192,181,173,153,84,66,218,24,191,77,16,98,232,39,10,228,51,72,251,70,99,80,89,240,60,30,132,250,117,15,21,237,106,125,203,120,137,245,36,122,211,130,168,146,131,144,233,136,124,199,254,147,107,18,159,42,37,78,255,160,195,182,123,170,89,65,10,83,246,201,170,201,37,185,165,10,246,197,35,114,16,23,61,226,88,225,111,79,168,224,74,203,206,244,7,121,157,219,112,14,225,67,159,10,154,252,64,70,208,154,67,97,41,235,138,244,146,60,97,26,9,190,136,25,222,232,205,135,194,62,186,104,187,161,103,160,215,162,52,81,165,208,232,5,74,167,183,172,50,190,6,201,116,41,10,223,182,99,21,102,95,64,187,229,168,25,246,206,141,217,6,251,105,243,15,94,137,192,198,73,86,2,201,15,193,228,168,139,196,87,16,73,208,157,244,99,231,117,38,232,213,161,201,52,225,240,50,164,243,70,174,58,51,81,73,220,237,48,21,143,172,231,104,151,191,52,157,188,139,178,65,163,142,243,117,208,251,204,191,96,177,225,197,90,10,206,254,218,97,15,116,185,118,223,73,40,49,105,70,107,229,241,8,201,121,37,200,9,243,196,199,9,155,17,152,123,166,146,80,174,94,112,103,174,137,165,230,164,103,103,16,229,78,142,112,100,16,172,236,205,146,18,105,236,147,7,25,183,69,239,201,251,54,57,12,252,7,176,229,216,47,154,79,47,251,38,86,140,143,6,250,57,182,246,69,200,114,128,9,162,0,115,151,200,246,252,166,196,198,224,46,246,224,67,101,48,251,42,148,30,0,113,110,22,246,136,120,88,146,6,224,92,200,163,64,35,239,81,152,236,66,213,3,156,19,108,147,212,84,234,101,189,147,154,23,57,132,39,211,82,200,112,171,221,248,34,252,96,186,243,124,171,158,38,241,99,93,218,234,6,31,133,48,195,17,33,39,167,126,208,165,120,52,236,89,122,134,49,46,172,144,51,36,137,174,192,152,27,224,206,199,193,100,248,48,4,37,233,57,126,247,87,145,236,109,225,25,46,106,51,64,104,105,134,212,111,173,89,91,252,45,168,46,214,36,177,169,189,22,208,218,187,8,225,21,22,35,114,91,145,245,227,94,33,41,246,211,217,43,125,85,166,57,46,185,165,112,35,113,71,157,219,79,189,227,0,158,12,82,241,119,203,121,155,144,193,105,121,239,181,176,173,55,51,254,222,59,177,53,60,117,33,124,142,6,178,4,165,125,21,73,64,217,114,142,223,67,39,221,21,190,253,7,240,13,50,43,81,9,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("dc6e3865-0e37-42ce-a08e-3cabc6196187"));
		}

		#endregion

	}

	#endregion

}

