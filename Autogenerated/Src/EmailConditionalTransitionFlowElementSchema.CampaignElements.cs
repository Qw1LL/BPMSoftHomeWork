namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: EmailConditionalTransitionFlowElementSchema

	/// <exclude/>
	public class EmailConditionalTransitionFlowElementSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public EmailConditionalTransitionFlowElementSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public EmailConditionalTransitionFlowElementSchema(EmailConditionalTransitionFlowElementSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("23c2b85a-8fc5-4adb-84ae-a79c64f14ea5");
			Name = "EmailConditionalTransitionFlowElement";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("d0bba11f-3986-4819-81ab-1d3ddbfc1f48");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,173,88,91,79,227,56,20,126,206,72,243,31,60,93,105,20,164,85,144,150,55,160,172,104,183,48,93,13,179,44,23,241,236,38,167,173,213,196,9,182,3,84,51,252,247,57,142,29,231,210,244,6,188,64,155,250,124,231,246,157,207,118,56,77,64,102,52,4,50,184,190,186,77,167,42,24,166,124,202,102,185,160,138,165,252,243,167,159,159,63,121,185,100,124,70,110,151,82,65,114,210,250,142,235,227,24,66,189,88,6,151,192,65,176,112,101,205,119,198,31,171,135,149,167,36,73,121,215,115,1,193,63,3,252,1,127,250,67,192,12,177,201,48,166,82,30,147,81,66,89,140,33,70,76,123,164,241,157,160,92,22,159,47,226,244,121,20,67,2,92,21,134,135,135,135,228,84,230,73,66,197,242,204,126,47,172,73,88,153,19,229,236,73,38,210,16,164,36,96,64,130,18,227,176,6,146,229,147,152,133,36,212,193,236,22,11,57,38,219,195,245,176,202,248,215,37,123,45,210,12,132,98,128,25,95,11,246,68,21,152,5,237,164,138,7,85,7,72,58,37,2,251,137,189,0,73,158,153,154,167,185,194,104,89,184,208,233,172,230,227,101,6,157,140,71,60,79,64,208,73,12,167,151,57,139,206,200,77,137,243,96,96,134,26,133,104,58,120,222,12,20,233,159,145,65,150,96,66,225,98,28,201,224,156,47,253,3,242,235,23,249,182,196,208,99,198,23,246,89,97,224,253,109,170,229,64,131,135,57,8,240,95,52,204,11,249,210,39,87,84,44,64,33,13,176,90,82,201,96,144,199,139,134,73,225,31,162,113,100,0,189,175,95,119,52,188,129,44,102,218,208,134,114,252,238,80,42,68,77,94,239,213,54,15,120,100,250,183,161,153,5,127,54,244,242,158,179,199,28,8,139,144,23,108,202,64,232,150,78,48,0,2,58,130,117,93,52,180,212,141,35,46,218,113,68,126,18,236,212,9,145,250,207,235,206,12,146,56,1,161,130,200,184,116,132,194,160,228,102,255,171,36,106,86,250,189,241,204,75,106,189,37,148,138,151,31,23,6,170,71,184,103,48,140,171,198,224,116,5,179,142,73,87,128,147,24,181,53,161,28,225,167,20,187,63,122,81,104,172,71,214,85,29,199,210,76,109,37,62,255,231,32,150,193,112,14,225,226,92,204,48,54,174,126,228,113,236,247,90,75,122,134,224,222,109,145,186,99,130,253,218,39,151,160,204,231,193,242,154,34,197,67,150,81,174,106,158,27,230,133,14,201,45,198,197,152,59,75,54,37,126,203,43,14,40,199,88,9,206,127,3,208,62,47,147,245,154,102,1,14,86,202,253,186,133,117,241,138,130,175,201,141,158,246,192,195,248,235,171,45,84,179,88,90,36,182,165,107,164,100,199,124,155,144,59,37,220,48,89,205,120,31,68,204,161,177,188,158,243,250,184,29,88,155,125,231,60,242,123,227,168,119,16,140,121,203,182,140,179,38,174,37,201,45,248,102,238,88,151,58,168,150,212,163,162,43,202,184,244,119,223,110,14,92,6,79,84,152,166,67,84,164,224,202,194,225,217,6,230,223,75,16,8,201,141,108,216,68,188,85,43,125,108,202,19,238,247,194,12,212,95,189,63,73,111,72,147,140,178,25,175,229,163,171,99,119,187,224,66,164,137,223,187,162,168,12,44,142,77,166,88,187,115,233,247,146,176,90,54,70,215,226,223,148,33,242,48,201,16,77,168,48,227,170,72,237,142,10,148,26,107,100,252,150,118,94,240,95,61,150,210,205,13,96,32,12,213,225,222,52,74,142,30,115,26,23,30,113,85,243,215,142,8,92,81,173,207,9,180,28,226,3,141,211,5,94,53,164,14,110,182,234,42,208,7,42,177,226,117,115,83,215,0,171,136,39,91,5,194,159,82,36,251,65,229,183,224,157,113,60,222,104,88,219,72,15,202,70,106,74,173,156,122,28,65,186,250,108,221,205,139,156,156,165,97,125,219,165,172,99,59,159,93,168,93,69,118,27,156,171,246,124,165,220,243,181,245,118,214,197,175,214,181,85,138,50,61,157,125,251,120,87,37,191,45,251,245,89,87,152,85,210,31,146,245,27,211,182,162,86,254,235,136,228,54,67,238,79,151,63,210,239,105,184,248,134,123,186,83,112,20,77,149,11,222,33,20,117,189,180,139,180,64,158,236,171,114,110,203,168,201,92,83,118,240,30,166,198,242,2,40,58,129,17,215,231,14,108,67,77,226,178,120,121,151,186,50,225,206,242,102,153,172,142,194,13,153,180,27,197,158,50,185,106,213,144,201,163,157,101,178,153,170,99,134,120,163,78,30,117,232,228,209,46,58,169,93,214,150,173,81,178,163,247,41,89,225,162,38,86,251,106,90,71,213,183,211,123,213,232,227,232,221,62,183,174,158,229,161,121,173,232,119,95,86,171,35,85,253,78,212,239,147,8,166,52,143,149,175,193,138,59,235,151,38,96,75,217,218,217,216,36,13,207,91,39,164,245,28,55,88,13,66,111,229,115,155,206,13,102,78,244,39,187,110,47,58,87,36,52,234,168,218,28,173,8,92,70,217,77,244,18,166,32,98,185,116,95,34,151,147,96,227,120,11,145,27,113,180,113,202,174,174,223,126,154,205,199,190,83,105,123,104,218,221,58,88,175,31,14,55,27,245,245,187,188,34,168,93,236,82,85,92,50,55,220,74,111,10,47,146,224,123,2,177,36,106,78,21,97,60,140,243,8,39,129,70,238,205,86,156,206,88,184,230,94,90,60,49,209,202,179,1,197,45,254,84,2,144,80,192,180,223,187,207,34,28,210,222,33,142,89,113,153,196,27,175,126,147,68,20,75,128,32,15,200,148,197,88,183,234,53,154,12,78,15,75,48,51,230,54,9,146,62,129,16,248,46,195,220,77,135,2,119,36,40,36,195,205,246,4,157,7,141,31,76,41,59,239,177,27,74,105,158,54,31,226,179,223,111,21,128,1,223,20,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("23c2b85a-8fc5-4adb-84ae-a79c64f14ea5"));
		}

		#endregion

	}

	#endregion

}

