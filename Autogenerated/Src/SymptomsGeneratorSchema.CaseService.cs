namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: SymptomsGeneratorSchema

	/// <exclude/>
	public class SymptomsGeneratorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public SymptomsGeneratorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public SymptomsGeneratorSchema(SymptomsGeneratorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("329987ff-77ba-409b-96ae-cbb425a36b31");
			Name = "SymptomsGenerator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("77fa8847-960e-4748-ad77-e37bb90e03a0");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,149,84,77,79,27,49,16,61,7,137,255,96,45,151,32,69,27,169,71,8,161,52,138,104,84,133,82,72,123,41,61,56,187,147,101,219,181,189,29,219,41,43,196,127,239,216,222,47,22,181,180,151,40,227,125,243,230,121,230,141,37,23,160,75,158,0,123,119,189,190,85,59,19,47,148,220,229,153,69,110,114,37,15,15,30,15,15,70,86,231,50,99,183,149,54,32,78,7,49,225,139,2,18,7,214,241,37,72,192,60,121,129,217,192,131,137,111,32,179,5,199,229,67,137,160,181,195,119,184,133,18,66,201,126,140,240,60,138,151,210,228,38,7,151,68,31,142,16,50,162,96,139,130,107,125,66,117,68,105,148,208,94,0,55,10,61,168,180,219,34,79,88,226,48,47,33,236,132,173,214,60,65,165,87,114,175,126,240,109,1,148,227,238,219,178,175,193,220,171,84,19,242,26,149,161,91,66,234,137,71,211,233,148,205,180,21,130,99,53,111,14,46,193,104,150,112,13,44,79,217,14,149,96,28,51,43,64,26,166,182,223,41,59,110,83,167,195,220,89,201,145,11,38,105,28,103,81,147,22,205,47,6,4,179,169,199,117,105,8,198,162,212,243,27,72,20,166,84,152,32,205,153,3,149,141,110,182,207,209,88,94,176,75,75,234,72,234,130,132,174,210,113,32,110,149,30,51,223,128,209,158,35,67,207,217,74,56,235,174,195,53,251,0,213,23,94,88,184,230,57,206,180,65,154,211,196,115,207,207,221,224,70,163,160,98,64,18,191,231,218,167,177,243,225,23,127,28,126,169,223,142,41,94,210,196,42,207,246,20,218,126,4,50,13,163,169,227,122,78,52,157,18,208,185,195,141,202,79,253,47,115,250,172,1,89,162,164,12,182,253,195,84,106,243,56,240,162,197,14,195,208,172,12,76,184,179,174,255,188,34,183,103,171,215,180,222,132,89,178,208,97,182,247,237,217,145,121,133,119,238,255,58,74,119,150,210,255,224,41,109,11,83,151,30,250,42,116,167,150,69,118,10,155,228,199,55,244,148,110,76,229,173,231,22,100,149,146,155,58,15,118,192,211,214,124,160,127,18,70,194,47,230,23,191,186,77,238,65,240,79,22,176,26,63,31,66,220,7,172,185,228,25,224,132,69,142,59,170,9,137,44,190,72,83,122,170,172,144,227,168,121,10,162,94,61,39,43,16,81,89,135,39,121,33,30,148,155,212,55,232,229,234,154,143,50,59,26,71,176,169,74,168,171,250,206,212,139,50,127,41,33,223,177,113,67,19,175,244,149,50,87,182,40,62,162,95,129,241,113,211,193,81,175,20,189,167,240,64,175,106,89,208,243,221,38,79,216,219,232,235,29,222,201,111,143,111,38,79,17,53,194,5,77,153,126,126,91,174,161,8,72,202,152,109,145,77,231,209,113,188,193,92,44,101,58,110,78,226,141,90,220,115,188,64,228,78,84,224,36,179,119,235,222,144,254,101,13,194,233,243,195,167,223,62,137,72,205,136,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("329987ff-77ba-409b-96ae-cbb425a36b31"));
		}

		#endregion

	}

	#endregion

}

