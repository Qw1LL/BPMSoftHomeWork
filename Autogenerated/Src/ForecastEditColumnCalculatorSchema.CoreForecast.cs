namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecastEditColumnCalculatorSchema

	/// <exclude/>
	public class ForecastEditColumnCalculatorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastEditColumnCalculatorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastEditColumnCalculatorSchema(ForecastEditColumnCalculatorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("708ae3de-3a3f-43e7-b680-88ba2d6188bb");
			Name = "ForecastEditColumnCalculator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,181,86,75,107,219,74,20,94,167,208,255,48,184,93,200,16,20,184,75,199,118,73,92,167,215,208,4,55,238,99,81,74,152,72,71,242,80,105,228,204,140,82,132,241,127,239,153,25,141,222,118,3,247,118,99,172,243,62,223,121,13,167,41,200,29,13,128,92,175,111,55,89,164,252,69,198,35,22,231,130,42,150,113,255,38,19,16,80,169,190,254,243,250,213,254,245,171,179,92,50,30,147,77,33,21,164,254,71,198,159,46,43,98,156,100,143,52,153,76,22,89,154,162,230,199,44,142,145,92,243,107,7,154,63,68,23,48,76,245,151,92,49,197,64,30,97,223,208,64,101,194,242,81,226,141,128,24,99,39,139,132,74,57,33,46,133,101,200,212,34,75,242,148,47,104,18,228,9,69,29,35,255,253,61,68,52,79,212,53,227,33,218,246,84,177,131,44,242,86,78,177,22,31,159,147,59,4,140,204,42,163,136,150,84,210,215,182,233,99,2,214,254,103,52,160,229,198,63,208,250,46,127,76,88,64,2,29,204,201,88,200,132,12,184,68,11,136,59,254,86,105,221,48,72,66,204,107,45,216,51,85,96,153,59,251,209,176,96,172,223,195,46,147,12,205,20,228,33,232,80,46,143,104,126,16,89,190,91,64,146,200,181,200,158,89,8,130,60,196,61,218,49,237,205,22,64,53,221,202,54,161,212,123,3,60,180,249,180,237,72,133,125,23,16,1,52,204,120,82,144,21,182,17,121,72,240,103,70,240,239,45,229,52,6,225,127,0,165,251,11,196,244,20,162,115,111,236,220,185,150,208,229,18,185,110,23,141,160,41,77,25,128,45,211,41,115,222,23,9,2,45,112,8,244,108,144,188,245,57,38,122,62,206,206,58,66,179,142,152,110,225,179,195,48,8,46,74,196,120,7,66,55,188,174,114,166,80,19,66,135,83,249,121,162,210,61,194,108,110,34,235,117,0,121,247,142,120,125,234,204,78,142,157,170,66,99,61,61,234,108,238,25,211,103,28,126,53,193,189,18,113,158,2,87,222,168,157,253,232,156,180,241,25,143,93,137,6,50,27,232,196,1,146,203,174,223,163,54,191,1,250,169,12,251,30,254,106,142,221,121,233,126,187,236,58,99,100,83,235,18,79,229,213,49,252,55,146,234,180,126,231,115,79,98,80,151,164,154,116,253,241,135,65,184,5,181,205,142,238,58,115,21,138,77,176,133,148,126,202,1,243,199,132,239,33,114,215,98,185,249,228,153,172,137,193,201,13,232,51,21,36,114,160,24,101,196,173,29,171,223,52,221,216,57,43,196,137,242,0,174,139,47,171,208,51,86,171,11,105,85,86,92,183,14,114,53,58,232,12,113,213,231,170,237,175,188,33,109,162,175,169,151,85,132,2,34,59,107,40,104,29,161,127,235,3,83,4,1,24,134,21,232,172,165,182,227,132,241,159,159,33,221,225,2,211,46,223,142,190,239,251,177,28,38,251,202,157,9,227,48,89,133,63,252,81,29,13,200,39,212,214,189,210,3,221,251,191,160,211,160,141,107,151,91,6,130,138,96,91,52,1,248,215,17,87,248,254,144,94,41,142,209,249,216,33,41,21,133,9,169,204,100,37,175,146,95,180,144,27,72,48,54,13,56,77,36,212,42,171,152,99,0,239,153,68,116,138,175,52,201,65,162,16,14,66,83,70,34,95,49,110,244,107,86,21,156,206,97,73,131,173,199,48,32,28,214,178,199,140,238,85,24,150,21,210,76,223,254,95,83,181,45,195,62,52,194,191,97,137,2,33,181,142,167,191,23,120,1,21,88,234,55,166,182,107,42,176,46,90,196,179,68,124,69,237,168,96,50,51,175,13,127,249,148,211,228,28,235,187,111,86,252,96,218,31,103,215,2,88,3,124,220,229,74,222,229,73,98,121,94,215,92,251,10,140,254,163,181,53,8,150,133,149,21,1,42,23,92,183,218,75,110,100,189,26,26,71,252,226,226,130,76,101,158,234,78,152,59,130,59,224,88,93,215,250,196,222,60,242,108,138,238,87,170,23,93,221,41,98,76,83,194,17,251,217,104,87,213,96,52,175,235,225,79,47,12,163,214,177,137,200,249,109,22,178,136,225,94,220,53,133,29,119,224,209,161,35,53,134,101,29,180,55,192,172,237,185,157,214,240,176,216,66,240,211,173,113,141,190,167,163,199,247,108,67,171,68,92,191,171,252,21,143,50,111,116,234,221,51,169,162,209,192,227,24,11,92,246,163,198,168,90,52,245,240,116,159,7,122,102,45,77,54,252,87,131,95,173,73,109,197,220,233,218,191,54,87,26,246,191,109,113,225,121,129,158,175,160,54,185,1,133,147,25,203,169,123,125,151,4,124,246,225,220,154,59,174,57,165,11,22,17,175,235,2,197,150,233,78,21,222,216,1,249,114,76,238,50,27,49,1,100,87,16,68,89,206,43,108,92,75,215,153,151,131,95,229,108,230,18,19,237,28,103,157,163,33,157,4,77,103,116,116,51,14,164,118,50,154,254,49,181,59,191,127,82,237,49,109,93,42,123,142,156,16,106,233,13,80,221,43,196,78,47,96,108,158,225,83,85,67,254,246,15,152,223,104,116,201,190,231,17,119,107,142,111,150,241,193,150,68,18,149,97,88,129,155,33,87,143,254,211,206,191,175,165,106,174,77,241,220,220,187,65,129,122,250,29,182,182,219,106,0,122,33,182,54,254,203,51,110,78,94,196,56,195,200,170,246,26,174,231,240,222,180,212,54,17,105,191,1,50,53,223,72,255,15,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("708ae3de-3a3f-43e7-b680-88ba2d6188bb"));
		}

		#endregion

	}

	#endregion

}

