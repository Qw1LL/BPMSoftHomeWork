namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: MacrosValueFormatterSchema

	/// <exclude/>
	public class MacrosValueFormatterSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public MacrosValueFormatterSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public MacrosValueFormatterSchema(MacrosValueFormatterSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("9e7e89dd-f5d2-4d34-a996-84b7bea8bd6f");
			Name = "MacrosValueFormatter";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("d9c4378b-4458-41ff-9d84-e4b071fcce18");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,141,84,77,111,218,64,16,61,59,82,254,195,148,74,17,72,149,125,111,48,135,66,90,113,160,69,130,164,231,197,25,195,86,182,215,218,15,36,43,233,127,239,236,135,139,109,72,194,197,218,157,157,121,243,246,205,91,87,172,68,85,179,12,225,219,122,181,17,185,142,231,162,202,249,222,72,166,185,168,226,71,205,11,117,123,243,114,123,19,25,197,171,61,108,26,165,177,188,255,191,63,149,73,188,28,141,31,42,205,53,71,69,199,148,240,89,226,158,144,97,94,48,165,190,194,138,101,82,168,39,86,24,252,46,100,201,180,70,233,242,146,36,129,169,50,101,201,100,51,11,251,5,170,76,242,29,42,64,139,217,64,38,10,83,86,112,180,229,144,183,245,113,91,158,116,234,107,179,43,120,6,153,109,251,70,215,136,174,73,223,19,69,81,41,45,77,166,133,36,166,107,7,224,51,134,228,92,160,147,110,185,80,2,34,100,18,243,116,116,169,223,40,153,89,162,231,76,125,164,102,146,149,80,209,124,210,145,81,40,9,189,194,204,14,101,52,91,82,35,86,209,208,68,222,237,242,216,79,35,252,105,226,96,28,106,16,224,18,149,113,191,18,250,253,38,96,199,31,69,131,164,116,144,102,167,31,253,13,10,98,245,236,69,236,43,186,150,162,70,105,205,112,141,158,70,74,154,179,107,67,147,110,251,188,33,90,184,222,128,228,96,251,2,123,212,247,160,236,231,3,170,43,212,7,241,108,121,74,126,100,26,253,105,237,55,176,19,162,128,165,122,40,107,221,56,45,199,98,247,135,154,120,43,182,138,73,212,70,182,246,76,83,168,76,81,192,235,43,140,125,132,43,32,195,216,247,114,119,23,86,241,82,253,164,164,95,242,247,129,107,220,216,151,57,30,251,163,137,135,158,92,163,243,137,252,71,34,47,48,103,166,208,192,203,186,192,146,228,118,239,222,26,235,157,39,102,137,94,105,93,87,55,154,109,132,145,228,215,11,152,61,143,158,149,251,204,209,204,253,67,26,80,217,1,75,22,234,207,43,189,222,106,54,77,218,85,199,25,71,46,181,97,69,43,249,15,212,27,183,242,227,243,13,230,14,216,69,66,147,167,238,60,143,76,182,220,211,238,57,253,231,236,218,77,38,226,57,140,123,206,232,38,122,184,22,175,53,72,152,189,171,241,32,52,223,0,21,250,125,10,238,33,167,132,219,47,152,102,14,110,219,212,206,75,20,192,45,47,177,119,48,108,117,169,56,38,45,252,13,22,92,213,5,235,241,254,210,187,168,231,223,229,24,112,233,145,29,233,101,199,91,225,85,189,112,235,119,140,235,163,253,32,197,254,1,198,0,235,68,158,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("9e7e89dd-f5d2-4d34-a996-84b7bea8bd6f"));
		}

		#endregion

	}

	#endregion

}

