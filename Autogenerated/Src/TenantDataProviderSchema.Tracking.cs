namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: TenantDataProviderSchema

	/// <exclude/>
	public class TenantDataProviderSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public TenantDataProviderSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public TenantDataProviderSchema(TenantDataProviderSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("9cf1bddb-587e-4ccd-8e7a-cb0987fe1fda");
			Name = "TenantDataProvider";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("120fd877-7905-4e7f-9414-1956e0c20629");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,141,85,77,111,219,48,12,61,187,64,255,3,145,30,234,96,64,124,207,23,176,165,91,145,67,129,160,73,207,131,98,211,137,208,88,242,36,57,91,86,228,191,143,146,156,196,177,157,206,151,196,162,200,71,242,241,153,22,44,67,157,179,24,225,219,226,101,41,83,51,152,73,145,242,77,161,152,225,82,12,86,138,197,239,92,108,238,239,62,238,239,130,66,211,35,44,15,218,96,54,58,159,47,145,10,201,74,246,7,133,27,138,134,217,142,105,61,132,21,10,38,204,92,164,242,149,146,73,161,209,121,69,81,4,99,93,100,25,83,135,105,121,126,66,29,243,53,106,80,165,39,164,74,102,228,134,8,177,194,116,210,243,96,79,204,176,133,146,123,158,160,26,60,163,185,164,8,251,189,104,58,56,193,71,21,252,188,88,239,120,12,177,45,170,165,38,24,66,21,245,82,106,64,173,211,239,185,43,242,200,81,25,142,212,218,194,97,250,251,122,63,206,0,84,156,6,169,64,219,127,2,22,134,155,3,157,212,158,19,235,241,142,147,133,236,182,226,102,201,167,154,181,81,150,233,121,25,62,115,81,243,4,62,96,131,102,100,177,71,112,236,92,133,41,135,122,174,194,56,50,254,91,197,115,193,19,75,220,205,220,15,40,18,79,146,59,123,107,205,216,170,141,42,241,55,181,81,58,0,167,161,169,204,233,211,171,163,44,191,236,166,235,236,171,57,105,246,222,184,244,24,215,245,212,5,240,131,227,46,177,195,87,124,207,140,23,115,144,251,3,9,151,37,82,236,14,167,153,253,204,153,217,46,232,169,132,134,9,244,34,150,243,200,39,140,114,186,234,141,58,96,88,173,222,192,176,140,156,48,106,116,95,248,38,49,27,85,196,70,170,46,186,173,184,131,76,129,121,234,110,232,195,89,114,166,88,6,130,22,202,164,87,208,44,8,65,96,108,167,212,155,206,9,140,9,42,156,160,222,174,238,6,227,200,5,86,117,214,156,79,120,29,4,215,248,125,27,27,4,67,88,51,141,97,237,142,116,122,252,156,153,23,52,91,153,116,33,197,142,81,183,200,237,22,37,10,77,161,132,158,158,87,140,151,235,22,207,193,227,232,228,83,233,191,109,13,185,220,158,152,144,122,114,29,239,153,2,43,159,55,181,35,69,248,75,251,252,165,33,58,187,172,131,192,167,130,37,241,176,146,239,40,248,95,76,104,49,188,226,175,2,181,25,183,165,157,134,101,130,190,131,248,108,199,124,255,131,113,97,220,234,118,120,96,36,60,214,85,250,216,92,62,191,113,13,95,23,243,46,60,206,43,50,106,124,18,170,187,220,126,2,90,169,109,89,251,181,175,71,133,219,162,157,215,202,139,216,137,215,102,206,105,72,208,87,140,118,216,156,199,127,48,117,97,130,172,7,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("9cf1bddb-587e-4ccd-8e7a-cb0987fe1fda"));
		}

		#endregion

	}

	#endregion

}

