namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: FloatColumnProcessorSchema

	/// <exclude/>
	public class FloatColumnProcessorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public FloatColumnProcessorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public FloatColumnProcessorSchema(FloatColumnProcessorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("30a1a7ef-6525-497b-a8c9-487797a70be1");
			Name = "FloatColumnProcessor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("bdeb1980-c322-4103-af7f-58bfe7162080");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,189,84,193,110,219,48,12,61,167,192,254,129,203,46,9,16,56,247,182,201,176,166,75,145,67,139,160,73,119,41,122,80,108,58,21,32,75,6,37,5,205,138,254,251,40,201,65,227,212,232,101,195,114,112,44,154,124,36,223,35,165,69,133,182,22,57,194,213,242,118,101,74,151,205,140,46,229,214,147,112,210,232,108,46,21,46,170,218,144,251,114,246,250,229,172,231,173,212,91,88,237,173,195,234,226,228,156,221,40,179,17,74,254,142,161,31,190,174,241,197,101,247,184,245,74,208,207,151,154,208,90,118,179,239,126,239,21,16,118,91,179,185,200,157,33,137,33,138,61,190,17,110,25,3,102,74,88,123,14,115,101,132,155,25,229,43,189,36,147,115,2,67,209,111,60,30,195,165,212,207,72,210,21,38,135,156,176,156,244,239,140,94,34,89,201,213,233,211,176,215,245,61,90,175,220,91,127,60,61,0,88,95,85,130,246,135,51,252,208,32,181,117,66,51,123,166,4,247,44,45,228,161,18,224,23,110,175,230,238,228,70,33,148,134,160,78,200,161,163,88,38,228,49,33,236,132,242,104,179,67,142,241,81,146,199,107,44,5,215,112,37,117,193,113,3,183,175,209,148,131,197,73,169,195,17,220,177,138,48,1,205,127,236,208,69,195,112,248,196,136,181,223,40,153,55,69,118,185,193,57,124,198,202,101,129,185,172,132,250,62,29,193,105,25,12,207,3,194,207,119,85,184,127,71,62,40,198,226,44,99,238,228,241,215,122,124,16,36,41,194,191,25,161,112,104,219,202,48,113,236,141,216,36,234,234,156,113,131,8,31,85,72,150,90,144,168,34,193,147,190,183,72,220,155,198,60,204,121,127,250,192,103,150,243,96,200,46,199,209,59,6,55,140,119,101,28,60,180,112,160,13,59,12,209,189,115,216,8,139,131,147,79,240,10,111,13,213,168,139,196,118,155,122,78,82,35,57,94,20,38,158,140,227,64,44,254,21,247,245,1,16,204,14,137,100,129,112,227,101,1,215,194,137,95,97,156,215,204,247,195,162,128,201,180,109,203,34,13,167,110,23,159,183,114,139,238,217,20,255,169,143,195,124,135,217,101,155,139,117,14,210,5,152,208,162,165,89,222,248,206,106,68,169,130,80,89,43,236,216,41,220,103,189,222,140,179,123,194,133,46,13,228,158,40,212,152,76,188,189,237,113,200,102,233,123,176,102,141,83,2,225,157,10,183,72,158,108,171,154,75,46,101,158,234,154,0,95,176,248,194,215,108,173,248,82,63,46,33,139,207,17,244,31,71,217,83,127,20,161,122,237,34,178,59,95,109,144,230,134,42,225,154,195,117,98,100,133,97,166,121,147,155,78,100,9,131,175,133,225,233,198,108,77,251,165,32,30,211,174,146,70,96,188,131,228,153,46,59,134,95,137,29,14,211,132,247,8,57,70,131,246,74,37,232,157,136,219,20,120,196,226,208,214,160,81,102,120,12,145,252,27,128,118,72,252,212,189,36,201,218,54,178,237,15,202,178,253,71,10,7,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("30a1a7ef-6525-497b-a8c9-487797a70be1"));
		}

		#endregion

	}

	#endregion

}

