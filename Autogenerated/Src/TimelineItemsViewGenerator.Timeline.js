define("TimelineItemsViewGenerator", ["ViewGeneratorV2"], function() {
	/**
	 * @class BPMSoft.configuration.TimelineItemsViewGenerator
	 * Timeline items view generator.
	 */
	Ext.define("BPMSoft.configuration.TimelineItemsViewGenerator", {
		extend: "BPMSoft.ViewGenerator",
		alternateClassName: "BPMSoft.TimelineItemsViewGenerator",

		// region Methods: Protected

		/**
		 * Obtains modules for custom generators in generation config (that are already loaded) synchronously.
		 * @protected
		 * @param {Object} viewConfig Generation config that contains items that have to be generated by
		 * custom generators.
		 */
		requireCustomGeneratorsSync: function(viewConfig) {
			var generators = this.customGenerators = {};
			this.fillCustomGenerators(viewConfig, generators);
			var modulesToRequire = [];
			BPMSoft.each(generators, function(descriptor) {
				if (Ext.isString(descriptor)) {
					var generatorModuleName = descriptor.split(".")[0];
					if (modulesToRequire.indexOf(generatorModuleName) === -1) {
						modulesToRequire.push(generatorModuleName);
					}
				}
			}, this);
			BPMSoft.each(modulesToRequire, function(generatorModuleName) {
				var module = require(generatorModuleName);
				this.setGeneratorsByModule(generatorModuleName, module);
			}, this);
		},

		// endregion

		// region Methods: Public

		/**
		 * Generates item view configuration after obtaining all custom generators synchronously.
		 * @param {Object} config Generation config that combined hierarchically.
		 * @return {Object} Generated view config.
		 */
		generateViewWithCustomGenerators: function(config) {
			this.requireCustomGeneratorsSync(config);
			var resultViewConfig = this.generateView(config);
			this.clear();
			return resultViewConfig;
		}

		// endregion

	});

	return Ext.create("BPMSoft.TimelineItemsViewGenerator");
});
