define("ContentBuilder", [
	"ModalBox",
	"MacrosModule",
	"ContainerListGenerator",
	"ContainerList",
	"ContentPreviewBlock",
	"ContentBuilderHelper",
	"css!ContentBuilderCSS",
	"MacrosUtilities",
	"ContentItemPanel",
	"ContentBlockDesigner",
	"ContentPanelLoader",
	"css!ContentBlockDesignerCSS",
	"css!ContentBlockCSS",
	"PreviewContentBuilder",
	"ObjectLinkStructureExplorerViewModel",
	"ObjectLinkStructureExplorerView",
	"ContentBuilderElement",
	"ContentBuilderUserBlock",
	"ContentBuilderUserBlockViewModel",
	"ContentBuilderBlock",
	"ContentBuilderElementViewModelFactory",
	"ContentExporterFactory",
	"ContentBuilderConstants",
	"BaseContentSerializableViewModelMixin",
	"ContentBlockViewModel",
	"ContentBlockGroupViewModel",
	"ContentMjBlockViewModel",
	"ContentHtmlBlockViewModel",
	"CustomerFontMixin",
	"ContentHtmlBlock"
], function(ModalBox) {
	return {
		modules: {
			ContentItemPanelModule: {
				moduleId: "ContentItemPanelModule",
				moduleName: "ConfigurationModuleV2",
				reload: true,
				config: {
					schemaName: "ContentPanelLoader",
					isSchemaConfigInitialized: true,
					useHistoryState: false,
					parameters: {
						viewModelConfig: {
							IsMjmlConfig: {
								"getValueMethod": "isMjmlConfig"
							},
							ContentBuilderState: {
								"attributeValue": "ContentBuilderState"
							}
						}
					}
				}
			},
			ContentBlockDesigner: {
				config: {
					schemaName: "ContentBlockDesigner",
					isSchemaConfigInitialized: true,
					useHistoryState: false,
					showMask: true,
					autoGeneratedContainerSuffix: "-content-block-designer",
					parameters: {
						viewModelConfig: {
							InitialConfig: {attributeValue: "BlockConfig"}
						}
					}
				}
			},
			PreviewContentBuilder: {
				config: {
					schemaName: "PreviewContentBuilder",
					isSchemaConfigInitialized: true,
					useHistoryState: false,
					showMask: true,
					autoGeneratedContainerSuffix: "-preview-content-builder",
					parameters: {
						viewModelConfig: {
							DesktopPreviewWidth: {attributeValue: "ContentSheetWidth"}
						}
					}
				}
			}
		},
		mixins: {
			MacrosUtilities: "BPMSoft.MacrosUtilities",
			SerializableMixin: "BPMSoft.BaseContentSerializableViewModelMixin",
			CustomerFontMixin: "BPMSoft.CustomerFontMixin"
		},
		attributes: {
			/**
			 * Sheet width in px.
			 */
			Width: {
				dataValueType: BPMSoft.DataValueType.INTEGER,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: 600
			},
			/**
			 * Sheet breakpoint width in px.
			 */
			BreakpointWidth: {
				dataValueType: BPMSoft.DataValueType.INTEGER,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: 480
			},
			/**
			 * Input field width value.
			 */
			ContentSheetWidth: {
				dataValueType: BPMSoft.DataValueType.INTEGER,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN,
				onChange: "onContentSheetWidthChanged"
			},
			/**
			 * Sheet background color.
			 */
			BackgroundColor: {
				dataValueType: BPMSoft.DataValueType.STRING,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: "#ffffff"
			},
			/**
			 * Content identifier.
			 */
			Id: {
				dataValueType: BPMSoft.DataValueType.TEXT,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Content builder caption.
			 */
			Caption: {
				dataValueType: BPMSoft.DataValueType.TEXT,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Blocks view model collection.
			 */
			Items: {
				dataValueType: BPMSoft.core.enums.DataValueType.COLLECTION,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Preview blocks collection.
			 */
			PreviewItems: {
				dataValueType: BPMSoft.DataValueType.COLLECTION,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Preset block configuration object.
			 */
			ExistingItemsConfig: {
				dataValueType: BPMSoft.DataValueType.CUSTOM_OBJECT,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Index of sheet item.
			 */
			ReorderableIndex: {
				dataValueType: BPMSoft.core.enums.DataValueType.INTEGER,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Sheet selection flag.
			 */
			ContentSheetSelected: {
				dataValueType: BPMSoft.core.enums.DataValueType.BOOLEAN,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Preview items loaded flag.
			 */
			IsPreviewItemsLoading: {
				dataValueType: BPMSoft.DataValueType.BOOLEAN
			},
			/**
			 * Sheet loaded flag.
			 */
			IsSheetContainerLoading: {
				dataValueType: BPMSoft.DataValueType.BOOLEAN
			},
			/**
			 * Sheet align value.
			 */
			SheetAlign: {
				dataValueType: BPMSoft.core.enums.DataValueType.STRING,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				value: BPMSoft.Align.CENTER
			},
			/**
			 * Current content exporter factory.
			 */
			ContentExporterFactory: {
				dataValueType: BPMSoft.core.enums.DataValueType.CUSTOM_OBJECT,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				value: Ext.create("BPMSoft.ContentExporterFactory")
			},
			/**
			 * Current view model factory.
			 */
			ContentBuilderElementViewModelFactory: {
				dataValueType: BPMSoft.core.enums.DataValueType.CUSTOM_OBJECT,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				value: Ext.create("BPMSoft.ContentBuilderElementViewModelFactory")
			},
			/**
			 * Right panel visible flag.
			 */
			RightPanelVisible: {
				dataValueType: BPMSoft.core.enums.DataValueType.BOOLEAN,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				value: false
			},
			/**
			 * Selected content item.
			 */
			SelectedContentItem: {
				dataValueType: BPMSoft.core.enums.DataValueType.CUSTOM_OBJECT,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				onChange: "onSelectedContentItemChange"
			},
			/**
			 * Flag that indicates whether blocks library (left control group) is visible or not.
			 */
			UseBlockLibrary: {
				dataValueType: BPMSoft.core.enums.DataValueType.BOOLEAN,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				value: true
			},
			/**
			 * Content block designer config.
			 */
			BlockConfig: {
				dataValueType: BPMSoft.core.enums.DataValueType.OBJECT,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Preview window visible.
			 */
			IsPreviewVisible: {
				dataValueType: BPMSoft.DataValueType.BOOLEAN,
				value: false
			},
			/**
			 * Search template.
			 */
			SearchTemplateName: {
				dataValueType: BPMSoft.DataValueType.TEXT,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN
			},
			/**
			 * Flag that indicates whether search template container is focused.
			 */
			IsSearchTemplateFocused: {
				dataValueType: BPMSoft.DataValueType.BOOLEAN,
				value: false
			},
			/**
			 * Navigation page path.
			 */
			NavigationPath: {
				dataValueType: BPMSoft.DataValueType.TEXT,
				value: "Navigation/Navigation.aspx"
			},

			/**
			 * Collection of grid elements like block and predefined grid structures.
			 */
			GridElementsCollection: {
				dataValueType: BPMSoft.DataValueType.COLLECTION,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				isCollection: true,
				value: Ext.create("BPMSoft.BaseViewModelCollection")
			},

			/**
			 * Collection of user designed mjml blocks.
			 */
			UserBlocksCollection: {
				dataValueType: BPMSoft.DataValueType.COLLECTION,
				type: BPMSoft.ViewModelColumnType.VIRTUAL_COLUMN,
				isCollection: true,
				value: Ext.create("BPMSoft.BaseViewModelCollection")
			},

			/**
			 * Preview items loaded flag.
			 */
			IsUserBlocksLoading: {
				dataValueType: BPMSoft.DataValueType.BOOLEAN
			},

			/**
			 * State of current content builder based on config type (MJML-friendly or not).
			 * @type {Number}
			 */
			ContentBuilderState: {
				dataValueType: BPMSoft.core.enums.DataValueType.INTEGER,
				type: BPMSoft.core.enums.ViewModelColumnType.VIRTUAL_COLUMN,
				onChange: "_onStateChanged"
			}
		},
		messages: {
			/**
			 * @message MacroSelected
			 */
			MacroSelected: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message GetModuleInfo
			 */
			GetModuleInfo: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message SaveHTMLElementContent
			 */
			SaveHTMLElementContent: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message UpdateContentItemConfig
			 * Sets actual content item config.
			 */
			UpdateContentItemConfig: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message RightPanelLoaded
			 * Receives signal of loaded right panel.
			 */
			RightPanelLoaded: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message ItemPanelLoaded
			 * Receives signal of loaded item panel.
			 */
			ItemPanelLoaded: {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message ActiveContentItemChanged
			 * Receives config of actual content item.
			 */
			ActiveContentItemChanged: {
				mode: BPMSoft.MessageMode.BROADCAST,
				direction: BPMSoft.MessageDirectionType.PUBLISH
			},

			/**
			 * @message ContentItemConfigChanged.
			 * Actualize current config.
			 */
			ContentItemConfigChanged: {
				mode: BPMSoft.MessageMode.BROADCAST,
				direction: BPMSoft.MessageDirectionType.PUBLISH
			},

			/**
			 * @message CloseContentBlockDesigner
			 */
			CloseContentBlockDesigner: {
				mode: BPMSoft.MessageMode.BROADCAST,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message ClosePreviewContentBuilder
			 */
			"ClosePreviewContentBuilder": {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message GetPreviewHtml
			 */
			"GetPreviewHtml": {
				mode: BPMSoft.MessageMode.PTP,
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE
			},
			/**
			 * @message ContentStructureItemAction
			 * Message for item action for selected structure item.
			 */
			"ContentStructureItemAction": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message SetContentItemSelected
			 * Message for changing selected content item by id.
			 */
			"SetContentItemSelected": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message BlockSaved
			 * Message indicates need save current mj-block.
			 */
			"BlockSaved": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message SaveBlockCancel
			 * Message for canceling mj-block saving process.
			 */
			"SaveBlockCancel": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message IsEmailMacroAvailable
			 */
			"IsEmailMacroAvailable": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message OpenMacrosDialog
			 */
			"OpenMacrosDialog": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message HtmlContentBuilderModeChanged
			 * Handles html mode change event for content.
			 */
			"HtmlContentBuilderModeChanged": {
				direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
				mode: BPMSoft.MessageMode.PTP
			},
			/**
			 * @message ContentBuilderStateChanged
			 * Publishes actual content builder state on change.
			 */
			"ContentBuilderStateChanged": {
				mode: BPMSoft.MessageMode.BROADCAST,
				direction: BPMSoft.MessageDirectionType.PUBLISH
			}
		},
		properties: {
			/**
			 * Available content designer container styles.
			 * @type {String}
			 */
			styleClasses: {
				narrow: "narrow"
			},

			/**
			 * @inheritdoc BaseContentSerializableViewModelMixin#serializableSlicePropertiesCollection
			 * @override
			 */
			serializableSlicePropertiesCollection: ["ItemType", "Caption", "Width", "BackgroundColor", "SheetAlign",
				"BreakpointWidth"],

			/**
			 * @inheritdoc BaseContentSerializableViewModelMixin#serializableChildrenCollectionSource
			 * @override
			 */
			serializableChildrenCollectionSource: "Items",

			/**
			 * @inheritdoc BaseContentSerializableViewModelMixin#childItemTypes
			 */
			childItemTypes: {
				block: "BPMSoft.ContentBlockViewModel",
				blockgroup: "BPMSoft.ContentBlockGroupViewModel",
				mjblock: "BPMSoft.ContentMjBlockViewModel",
				htmlblock: "BPMSoft.ContentHtmlBlockViewModel"
			},

			/**
			 * List of item types that are not selectable to view their props.
			 * @type {Array}
			 */
			unselectableItems: ["mjgroup", "htmlblock"]
		},
		methods: {

			/**
			 * @private
			 */
			_findElementById: function(elements, itemId) {
				var element = null;
				BPMSoft.each(elements, function(item) {
					if (element) {
						return false;
					}
					if (item.$Id === itemId) {
						element = item;
						return false;
					}
					element = item.$Items && this._findElementById(item.$Items, itemId);
				}, this);
				return element;
			},

			/**
			 * @private
			 */
			_unselectCurrentElement: function(selectedItemId) {
				var currentSelectedElement = this.$SelectedContentItem;
				if (currentSelectedElement) {
					var itemType = currentSelectedElement.$ItemType;
					if ((itemType === "block" || itemType === "mjblock" || itemType === "htmlblock")
							&& !currentSelectedElement.checkIsSelectable()) {
						var selectedGroup = this.$Items.findByFn(function(item) {
							return item.$ItemType === "blockgroup" && item.$Selected === true
								&& item.$Id !== selectedItemId;
						});
						selectedGroup && selectedGroup.set("Selected", false);
					} else {
						currentSelectedElement.$Selected && currentSelectedElement.set("Selected", false);
					}
				}
			},

			/**
			 * @private
			 */
			_updatePanelVisibility: function() {
				if (this.get("SelectedContentItem")) {
					this.showContentItemPanel();
				} else {
					this.hideContentItemPanel();
				}
			},

			/**
			 * @private
			 */
			_setBlockElementsSelected: function(block, itemId) {
				var elements = block.get("Items");
				var element = elements.findByFn(function(item) {
					return item.get("Id") === itemId;
				}, this);
				if (element) {
					element.set("Selected", true);
					this.set("SelectedContentItem", element);
				}
			},

			/**
			 * @private
			 */
			_onClosePreviewContentBuilder: function() {
				this.$IsPreviewVisible = false;
			},

			/**
			 * @private
			 */
			_filteredPreviewItems: function() {
				var searchTemplate = this.$SearchTemplateName;
				var previewItems = this.$PreviewItems;
				previewItems.each(function(item) {
					item.$Visible =  Ext.isEmpty(searchTemplate)
						|| BPMSoft.includes(item.$Caption.toUpperCase(), searchTemplate.toUpperCase());
				}, this);
			},

			/**
			 * @private
			 */
			_filterUserBlockItems: function() {
				var searchTemplate = this.$SearchTemplateName;
				var userBlocks = this.$UserBlocksCollection;
				userBlocks.each(function(item) {
					item.$Visible =  Ext.isEmpty(searchTemplate)
						|| BPMSoft.includes(item.$Caption.toUpperCase(), searchTemplate.toUpperCase());
				}, this);
			},

			/**
			 * @private
			 */
			_canPublishConfig: function() {
				return this.$SelectedContentItem && BPMSoft.Features.getIsEnabled("ContentBuilderPropertiesPanel");
			},

			/**
			 * @private
			 */
			_subscribeBlockEvents: function(block) {
				block.on("ondragover", this.onBlockDragOver, this);
				block.on("ondragdrop", this.onBlockDragDrop, this);
				block.on("oninvaliddrop", this.onBlockInvalidDrop, this);
				block.on("deleteiconclick", this.onUserBlockDeleteIconClick, this);
			},

			/**
			 * @private
			 */
			_subscribeGridElementsEvents: function() {
				BPMSoft.each(this.$GridElementsCollection, function(item) {
					if (item.$ItemType === "mjblock") {
						this._subscribeBlockEvents(item);
					}
				}, this);
			},

			/**
			 * Returns true if content builder state is not error.
			 * @private
			 * @returns {Boolean} Is GRID config or feature enabled.
			 */
			_isSuccessState: function() {
				return !this.isErrorState();
			},

			/**
			 * Returns state of Mjml config feature.
			 * @private
			 * @returns {Number} BPMSoft.ContentBuilderParams.mjmlFeature code.
			 */
			_getMjmlFeatureState: function() {
				return this.isMjmlContentBuilderEnabled()
					? BPMSoft.ContentBuilderParams.mjmlFeature.ON
					: BPMSoft.ContentBuilderParams.mjmlFeature.OFF;
			},

			/**
			 * Returns state of Mjml config feature.
			 * @private
			 * @param {Object} config Template config.
			 * @returns {Number} BPMSoft.ContentBuilderParams.config code.
			 */
			_getConfigState: function(config) {
				if (config && !BPMSoft.isEmpty(config.Items)) {
					var firstChild = config.Items[0];
					switch (firstChild.ItemType) {
						case "blockgroup":
							return this._getConfigState(firstChild);
						case "mjblock":
							return BPMSoft.ContentBuilderParams.config.MJML;
						case "block":
							return BPMSoft.ContentBuilderParams.config.GRID;
						case "htmlblock":
							return BPMSoft.ContentBuilderParams.config.HTML;
						default:
							return null;
					}
				}
				return null;
			},

			/**
			 * @private
			 */
			_getImageConfigFromSysImage: function(sysImage) {
				if (!Ext.isEmpty(sysImage)) {
					return {
						source: BPMSoft.ImageSources.SYS_IMAGE,
						params: { primaryColumnValue: sysImage.value }
					};
				}
				return this.get("Resources.Images.DefaultBlockImage");
			},
			/**
			 * Returns config of current selected content item.
			 * @private
			 * @returns {Object} Selected item config object.
			 */
			_getSelectedItemConfig: function() {
				var selectedContentItem = this.get("SelectedContentItem");
				if (selectedContentItem && Ext.isFunction(selectedContentItem.getEditConfig) && this.isMjmlConfig()) {
					return selectedContentItem.getEditConfig(this.isMjmlConfig());
				}
				var contentBuilderHelper = this.createContentBuilderHelper();
				var itemConfig = selectedContentItem && contentBuilderHelper.toJSON(selectedContentItem);
				if (itemConfig) {
					delete itemConfig["Content"];
					delete itemConfig["HtmlText"];
				}
				return itemConfig;
			},

			/**
			 * Recursively searches for the parent item.
			 * @private
			 */
			_getParentItem: function(child, root, itemTypesToSkip) {
				var result = null;
				BPMSoft.each(root.$Items, function(item) {
					if (item === child) {
						result = root;
						return false;
					}
					result = this._getParentItem(child, item, itemTypesToSkip);
					if (result) {
						return false;
					}
				}, this);
				if (itemTypesToSkip && result && Ext.Array.contains(itemTypesToSkip, result.$ItemType)) {
					result = root;
				}
				return result;
			},

			/**
			 * Switches selected item.
			 * @param {BPMSoft.configuration.BaseViewModel} item Content item on sheet.
			 * @private
			 */
			_switchSelectedItem: function(item) {
				if (!item) {
					return;
				}
				this._unselectCurrentElement(this.$SelectedContentItem.$Id);
				if (item.$ItemType === "blockgroup") {
					item = this;
				} else {
					var blockGroup = this._getParentItem(item, this);
					if (blockGroup && blockGroup.$ItemType === "blockgroup") {
						blockGroup.set("Selected", true);
						this.$SelectedContentItem = item;
						return;
					}
				}
				item.set("Selected", true);
				this.$SelectedContentItem = item;
			},

			/**
			 * Extends object with breadcrumbs collection.
			 * @private
			 * @param {Object} config Selected item config
			 */
			_extendWithBreadcrumbs: function (config) {
				config.Breadcrumbs = [];
				if (!this.isMjmlConfig()) {
					return;
				}
				var currentItem = this.$SelectedContentItem || this;
				for(var i = 0; i < 3; i++) {
					var item = {
						"Id": currentItem.$Id,
						"Caption": currentItem.get("Resources.Strings.Caption") || currentItem.$ItemType,
						"IsSelected": currentItem === this.$SelectedContentItem,
						"IsItemHasParent": currentItem !== this && i === 2
					};
					config.Breadcrumbs.unshift(item);
					if (currentItem === this) {
						return;
					}
					currentItem = this._getParentItem(currentItem, this, Ext.Array.merge(["blockgroup"], this.unselectableItems)) || this;
				}
			},

			/**
			 * @private
			 */
			_createUserBlockViewModel: function(userBlock) {
				var serializedBlockConfig = userBlock.get("BlockConfig");
				var blockConfig = (serializedBlockConfig && BPMSoft.decode(serializedBlockConfig)) || {};
				var sysImage = userBlock.get("Image");
				var imageConfig = this._getImageConfigFromSysImage(sysImage);
				return new BPMSoft.ContentBuilderUserBlockViewModel({
					values: {
						Id: userBlock.$Id,
						Visible: true,
						Caption: userBlock.get("Caption"),
						Icon: imageConfig,
						BlockConfig: blockConfig
					}
				});
			},

			/**
			 * @private
			 */
			_refreshDropZones: function() {
				Ext.dd.DragDropManager.refreshCache();
			},

			/**
			 * @private
			 */
			_registerSheetScrollableContainer: function() {
				var scrollEl = this.getSheetScrollabeElement();
				if (scrollEl) {
					scrollEl.ddScrollConfig = this.getDefaultDragDropScrollConfig();
					if (Ext.dd.ScrollManager.els[scrollEl.id]) {
						Ext.dd.ScrollManager.unregister(scrollEl);
					}
					Ext.dd.ScrollManager.register(scrollEl);
				}
				return scrollEl;
			},

			/**
			 * @private
			 */
			_onStateChanged: function() {
				this.sandbox.publish("ContentBuilderStateChanged", this.$ContentBuilderState);
			},

			/**
			 * Checks is current config is not for MJML (old grid version).
			 * @protected
			 * @returns {Boolean} Is config for grid.
			 */
			isGridConfig: function() {
				return Boolean(this.$ContentBuilderState & BPMSoft.ContentBuilderParams.config.GRID);
			},

			/**
			 * Checks is current config is for MJML (new version).
			 * @protected
			 * @returns {Boolean} Is config for MJML.
			 */
			isMjmlConfig: function() {
				return Boolean(
					this.$ContentBuilderState & BPMSoft.ContentBuilderParams.config.MJML
						|| this.$ContentBuilderState & BPMSoft.ContentBuilderParams.config.HTML
				);
			},

			/**
			 * Checks is current state is HTML editor.
			 * @protected
			 * @returns {Boolean} Is config for HTML.
			 */
			 isHtmlState: function() {
				return Boolean(this.$ContentBuilderState & BPMSoft.ContentBuilderParams.config.HTML);
			},

			/**
			 * Checks is current state is MJML designer.
			 * @protected
			 * @returns {Boolean} Is config for MJML.
			 */
			 isMjmlState: function() {
				return Boolean(this.$ContentBuilderState & BPMSoft.ContentBuilderParams.config.MJML);
			},

			/**
			 * Checks is current config is for GRID and feature is turned on.
			 * @protected
			 * @returns {Boolean} Is GRID config and feature enabled.
			 */
			isMigrateState: function() {
				return this.$ContentBuilderState === BPMSoft.ContentBuilderState.MIGRATE;
			},

			/**
			 * Checks is current config is for MJML and feature is turned off.
			 * @protected
			 * @returns {Boolean} Is MJML config and feature disabled.
			 */
			isErrorState: function() {
				return this.$ContentBuilderState === BPMSoft.ContentBuilderState.ERROR;
			},

			/**
			 * Returns type of current template config.
			 * @protected
			 * @returns {Number} Content builder config type.
			 */
			getConfigType: function() {
				return this.isMjmlConfig()
					? BPMSoft.ContentBuilderConfigType.MJML
					: BPMSoft.ContentBuilderConfigType.GRID;
			},

			/**
			 * Customizes right panel for mjml config state.
			 * @protected
			 */
			applyStylesForCurrentState: function() {
				var rightPanelEl = Ext.get("ContentPropertiesRightPanel");
				if (rightPanelEl && this.isMjmlConfig()) {
					rightPanelEl.addCls(this.styleClasses.narrow);
				}
			},

			/**
			 * Handler on sheet initialization async chain is finished.
			 * @protected
			 */
			onSheetInitialized: function() {
				if (this.isMjmlConfig()) {
					Ext.EventManager.on(window, "keydown", this.onKeyDownEventHandler, this);
				}
				if (this.isErrorState()) {
					this.showStateErrorMessage();
				}
				if (this.isGridConfig()) {
					this.hideBodyMask();
				}
			},

			/**
			 * @inheritdoc BPMSoft.BaseObject#constructor
			 * @override
			 */
			constructor: function() {
				this.extendSerializableSlicePropertiesCollection();
				this.callParent(arguments);
			},

			/**
			 * @inheritdoc BPMSoft.configuration.BaseSchemaViewModel#init
			 * @override
			 */
			init: function(callback, scope) {
				this.applyCustomerFonts();
				this.set("PreviewItems", new BPMSoft.BaseViewModelCollection());
				this.get("PreviewItems").on("itemChanged", this.previewItemChanged, this);
				this.set("Items", new BPMSoft.BaseViewModelCollection());
				this.subscribeForItemsCollectionEvents(this.get("Items"));
				this.callParent([function() {
					this.showBodyMask();
					BPMSoft.chain(
						function(next) {
							this.initializeSheet(next);
						},
						function(next, config) {
							this.loadContentSheetConfig(config, next);
						},
						function(next) {
							this.initLeftPanel(next, this);
						},
						function(next) {
							this.initDefaultValues(next, this);
						},
						function() {
							this.subscribeMessages();
							this.onSheetInitialized();
							callback.call(scope);
						},
						this
					);
				}, this]);
			},

			/**
			 * Handler of document key down.
			 * @protected
			 * @param {Object} event Event object.
			 */
			onKeyDownEventHandler: function(event) {
				var key = event.getKey();
				if (key === event.ESC) {
					this.onEscapeKeyDown();
				}
			},

			/**
			 * Handler of Escape button keyDown event.
			 * @protected
			 */
			onEscapeKeyDown: function() {
				if (!this.$SelectedContentItem) {
					return;
				}
				var parent = this._getParentItem(this.$SelectedContentItem, this, this.unselectableItems);
				this._switchSelectedItem(parent);
			},

			/**
			 * @inheritdoc BPMSoft.configuration.BaseSchemaViewModel#onRender
			 * @override
			 */
			onRender: function() {
				this.callParent(arguments);
				this.applyStylesForCurrentState();
			},

			/**
			 * Subscribes to group events.
			 * @protected
			 * @param {BPMSoft.ContentBlockViewModel} viewModelItem Content item.
			 */
			subscribeGroupElementsEvents: function(viewModelItem) {
				if (viewModelItem.$ItemType === "blockgroup") {
					this.subscribeForItemsCollectionEvents(viewModelItem.get("Items"));
				}
			},

			/**
			 * Unsubscribes from group events.
			 * @protected
			 * @param {BPMSoft.ContentBlockViewModel} viewModelItem Content item.
			 */
			unsubscribeGroupElementsEvents: function(viewModelItem) {
				if (viewModelItem.$ItemType === "blockgroup") {
					var items = viewModelItem.get("Items");
					items.un("itemChanged", this.itemChanged, this);
					items.un("add", this.onContentBlockAdd, this);
					items.un("remove", this.onContentBlockRemove, this);
					items.un("dataLoaded", this.onDataLoaded, this);
					items.un("clear", this.onClear, this);
				}
			},

			/**
			 * @inheritdoc BPMSoft.configuration.BasePageV2#setValidationConfig
			 * @override
			 */
			setValidationConfig: function() {
				this.callParent(arguments);
				this.addColumnValidator("ContentSheetWidth", this.widthRangeValidator);
			},

			/**
			 * Initializes default values.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Execution context.
			 */
			initDefaultValues: function(callback, scope) {
				var sysSettingsNames = [];
				if (BPMSoft.Features.getIsEnabled("UseFirebaseDynamicLinks")) {
					sysSettingsNames.push("FirebaseDynamicLinksTemplate");
				}
				BPMSoft.SysSettings.querySysSettings(sysSettingsNames, function(values) {
					BPMSoft.each(values, function(settingValue, settingName) {
						this.set(settingName, settingValue);
					}, this);
					callback.call(scope);
				}, this);
			},

			/**
			 * Generates query for preview blocks.
			 * @protected
			 * @param {String} tableNameWithBlocks Name of entity schema, where blocks are stored.
			 * @return {BPMSoft.data.queries.EntitySchemaQuery} Query for preview blocks.
			 */
			getBlocksEntitySchemaQuery: function(tableNameWithBlocks) {
				var esq = new BPMSoft.EntitySchemaQuery(tableNameWithBlocks);
				esq.addColumn("Id");
				esq.addColumn("Name", "Caption");
				var sortColumn = esq.addColumn("ModifiedOn");
				sortColumn.orderPosition = 0;
				sortColumn.orderDirection = BPMSoft.OrderDirection.DESC;
				esq.addColumn("Config", "BlockConfig");
				esq.addColumn("Image");
				return esq;
			},

			/**
			 * Loads list of default (predefined) grid elements.
			 * @protected
			 */
			loadGridElements: function() {
				var elements = this.$ContentBuilderElementViewModelFactory.getPredefinedElements();
				this.$GridElementsCollection.reloadAll(elements);
			},

			/**
			 * Initialize user blocks collection.
			 * @protected
			 * @param {BPMSoft.core.collections.Collection} userBlocksCollection User blocks collection from DB.
			 */
			onUserBlocksLoaded: function(userBlocksCollection) {
				this.set("IsUserBlocksLoading", false);
				var userBlocks = this.get("UserBlocksCollection");
				userBlocks.clear();
				userBlocksCollection.each(function(userBlock) {
					var blockViewModel = this._createUserBlockViewModel(userBlock);
					userBlocks.addItem(blockViewModel);
					this._subscribeBlockEvents(blockViewModel);
				}, this);
			},

			/**
			 * Loads preview blocks.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Scope object.
			 */
			loadPreviewBlocks: function(callback, scope) {
				this.set("IsPreviewItemsLoading", true);
				var entitySchemaQuery = this.getBlocksEntitySchemaQuery("ContentBlock");
				entitySchemaQuery.getEntityCollection(function(response) {
					if (response.success) {
						var collection = response.collection;
						this.onPreviewBlocksLoaded(collection);
						Ext.callback(callback, scope);
					}
				}, this);
			},

			/**
			 * Checks load preview blocks action possibility and does current action (if true).
			 * Otherwise calls callback function.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Scope object.
			 */
			tryLoadPreviewBlocks: function(callback, scope) {
				if (this.isBlockLibraryVisible()) {
					this.loadPreviewBlocks(callback, scope);
				} else {
					Ext.callback(callback, scope);
				}
			},

			/**
			 * Loads user blocks collection.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Scope object.
			 */
			loadUserBlocks: function(callback, scope) {
				this.set("IsUserBlocksLoading", true);
				var entitySchemaQuery = this.getBlocksEntitySchemaQuery("ContentUserBlock");
				entitySchemaQuery.getEntityCollection(function(response) {
					if (response.success) {
						var collection = response.collection;
						this.onUserBlocksLoaded(collection);
						Ext.callback(callback, scope);
					}
				}, this);
			},

			/**
			 * Initializes left panel container.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Scope object.
			 */
			initLeftPanel: function(callback, scope) {
				if (this.isMjmlConfig()) {
					this.loadGridElements();
					this._subscribeGridElementsEvents();
					this.loadUserBlocks(callback, scope);
				} else {
					this.tryLoadPreviewBlocks(callback, scope);
				}
			},

			/**
			 * Generates preview html.
			 * @protected
			 * @param {Object} previewConfig Preview config.
			 * @param {Number} previewConfig.width Preview width.
			 * @return {String} Preview html.
			 */
			getPreviewHtml: function(previewConfig) {
				var contentBuilderHelper = this.createContentBuilderHelper();
				var config = this.isMjmlConfig()
					? this.serializeViewModel()
					: contentBuilderHelper.toJSON(this);
				var emailContentExporter = this.getContentExporter(config);
				if (previewConfig && previewConfig.width) {
					config.Width = previewConfig.width;
				}
				return emailContentExporter.exportData(config);
			},

			/**
			 * Initialize preview block collection.
			 * @protected
			 * @param {BPMSoft.core.collections.Collection} previewBlocksCollection Preview block collection.
			 */
			onPreviewBlocksLoaded: function(previewBlocksCollection) {
				this.set("IsPreviewItemsLoading", false);
				var previewBlocks = this.get("PreviewItems");
				previewBlocks.clear();
				var contentBuilderHelper = this.createContentBuilderHelper();
				previewBlocksCollection.each(function(previewBlockItem) {
					var serializedBlockConfig = previewBlockItem.get("BlockConfig");
					var blockConfig = (serializedBlockConfig && BPMSoft.decode(serializedBlockConfig)) || {};
					var block = contentBuilderHelper.toViewModel(blockConfig);
					var id = block.get("Id");
					var caption = previewBlockItem.get("Caption");
					var sysImage = previewBlockItem.get("Image");
					var imageConfig = this._getImageConfigFromSysImage(sysImage);
					block.sandbox = this.sandbox;
					block.set("Caption", caption);
					block.set("Tag", id);
					block.set("ImageConfig", imageConfig);
					block.set("Visible", true);
					previewBlocks.add(id, block);
				}, this);
			},

			/**
			 * Handler on subitem select action.
			 * @protected
			 * @param {Object} config Message config.
			 */
			onStructureItemSelected: function(config) {
				var selectedItem = this.$SelectedContentItem;
				var item = selectedItem && this._findElementById(selectedItem.$Items, config.data);
				if (item) {
					this._unselectCurrentElement(item.$Id);
					item.set("Selected", true);
					this.set("SelectedContentItem", item);
				}
			},

			/**
			 * Handles addition of a new structure elements.
			 * @protected
			 * @param {Array} itemsToAdd
			 */
			handleStructureItemsAdd: function(itemsToAdd) {
				var selectedItem = this.$SelectedContentItem;
				if (!selectedItem || !itemsToAdd) {
					return;
				}
				BPMSoft.each(itemsToAdd, function(item) {
					var vm = {};
					if (this.isMjmlConfig()) {
						vm = selectedItem.createItemViewModel(item);
					} else {
						vm = this.createContentBuilderHelper().toViewModel(item);
					}
					vm.$Id = item.Id;
					selectedItem.$Items.add(item.Id, vm);
				}, this);
			},

			/**
			 * Handles deletion of structure elements.
			 * @protected
			 * @param {Array} itemsToDelete
			 */
			handleStructureItemsDelete: function(itemsToDelete) {
				var selectedItem = this.$SelectedContentItem;
				if (!selectedItem || !itemsToDelete) {
					return;
				}
				BPMSoft.each(itemsToDelete, function(item) {
					selectedItem.removeChildItem(item.Id);
				}, this);
			},

			/**
			 * Handles update of structure elements position, styles etc.
			 * @protected
			 * @param {Array} itemsToUpdate
			 */
			handleStructureItemsUpdate: function(itemsToUpdate) {
				var selectedItem = this.$SelectedContentItem;
				if (!selectedItem || !itemsToUpdate) {
					return;
				}
				selectedItem.updateStructureItems(itemsToUpdate);
			},

			/**
			 * Handles changes for structure items.
			 * @param {{add: Array, update: Array, delete: Array}} changes
			 */
			onStructureChanged: function(changes) {
				this.handleStructureItemsDelete(changes.delete);
				this.handleStructureItemsAdd(changes.add);
				this.handleStructureItemsUpdate(changes.update);
			},

			/**
			 * Handles reverse order of structure items.
			 * @param {Object} styles Content item styles.
			 */
			onReverseItemsOrder: function(styles) {
				if (!this.$SelectedContentItem) {
					return;
				}
				this.$SelectedContentItem.reverseItemsOrder(styles);
			},

			/**
			 * Handler on section action message.
			 * @protected
			 * @param {Object} config Message object.
			 * @returns {Object} Action result.
			 */
			onStructureItemAction: function(config) {
				switch (config.action) {
					case "structureChanged":
						return this.onStructureChanged(config.data);
					case "select":
						return this.onStructureItemSelected(config);
					case "reverseItemsOrder":
						return this.onReverseItemsOrder(config.data);
					default:
						return;
				}
			},

			/**
			 * Initializes sheet.
			 * @protected
			 */
			initializeSheet: function(callback) {
				this.set("IsSheetContainerLoading", true);
				this.getContentSheetConfig(callback, this);
			},

			/**
			 * Returns current content builder state.
			 * @protected
			 * @param {Object} config Template config.
			 * @returns {BPMSoft.ContentBuilderState} State of content builder.
			 */
			getContentBuilderState: function(config) {
				var featureState = this._getMjmlFeatureState();
				var configState = this._getConfigState(config);
				if (configState) {
					return featureState | configState;
				}
				if (featureState === BPMSoft.ContentBuilderParams.mjmlFeature.OFF) {
					return BPMSoft.ContentBuilderState.GRID;
				}
				return BPMSoft.ContentBuilderState.MJML;
			},

			/**
			 * Inits current content builder state based on template config type and MJML feature state.
			 * @protected
			 * @param {Object} config Template config.
			 */
			initTemplateConfigState: function(config) {
				var state = this.getContentBuilderState(config);
				this.$ContentBuilderState = state;
			},

			/**
			 * Initialize sheet config view model.
			 * @protected
			 * @param {Object} config Configuration object.
			 * @param {Function} callback Callback function.
			 */
			loadContentSheetConfig: function(config, callback) {
				this.initTemplateConfigState(config);
				this.$RightPanelVisible = this.isMjmlConfig();
				this.set("IsSheetContainerLoading", false);
				config = Ext.apply({}, config, {
					"Width": this.get("Width"),
					"BackgroundColor": this.get("BackgroundColor"),
					"SheetAlign": this.get("SheetAlign"),
					"BreakpointWidth": this.get("BreakpointWidth")
				});
				var sheetConfig = {};
				if (this.isMjmlConfig()) {
					this.extendChildrenItemTypes();
					sheetConfig = this.prepareValues(config);
					sheetConfig.Items = new BPMSoft.BaseViewModelCollection();
					if (!BPMSoft.isEmpty(config.Items) && config.Items.length > 0) {
						BPMSoft.each(config.Items, function (item) {
							var vm = this.createItemViewModel(item);
							sheetConfig.Items.add(vm.$Id, vm);
						}, this);
					}
				} else {
					sheetConfig = this.createContentBuilderHelper().toViewModel(config);
				}
				BPMSoft.each(sheetConfig, function(parameterValue, parameterName) {
					if (parameterName === "Caption") {
						parameterValue = parameterValue || this.get("Resources.Strings.DefaultCaption");
					}
					if (parameterName === "Items") {
						var items = this.get("Items");
						items.clear();
						items.loadAll(parameterValue);
						return;
					}
					if (parameterName === "Width") {
						this.set("ContentSheetWidth", parameterValue);
					}
					this.set(parameterName, parameterValue);
				}, this);
				if (Ext.isFunction(callback)) {
					callback.call(this);
				}
			},

			/**
			 * Subscribes to content items collection events.
			 * @protected
			 * @param {BPMSoft.data.model.BaseViewModelCollection} items Content items collection.
			 */
			subscribeForItemsCollectionEvents: function(items) {
				items.on("itemChanged", this.itemChanged, this);
				items.on("add", this.onContentBlockAdd, this);
				items.on("remove", this.onContentBlockRemove, this);
				items.on("dataLoaded", this.onDataLoaded, this);
				items.on("clear", this.onClear, this);
			},

			/**
			 * @private
			 */
			_getContentUserBlockEditModuleId: function() {
				return this.sandbox.id + "_ContentUserBlockEditPage";
			},

			/**
			 * Subscribes to events.
			 * @protected
			 */
			subscribeMessages: function() {
				var macrosModuleId = this.getMacrosModuleId();
				this.sandbox.subscribe("MacroSelected", this.onGetMacros, this, [macrosModuleId]);
				this.sandbox.subscribe("RightPanelLoaded", this.onRightPanelLoaded, this,
					["ContentPanelLoader"]);
				this.sandbox.subscribe("ItemPanelLoaded", this.onItemPanelLoaded, this,
					["ItemPanel"]);
				this.sandbox.subscribe("UpdateContentItemConfig", this.updateContentItemConfig, this, ["ItemPanel"]);
				this.sandbox.subscribe("CloseContentBlockDesigner", this.onCloseContentBlockDesigner, this);
				this.sandbox.subscribe("ClosePreviewContentBuilder", this._onClosePreviewContentBuilder, this);
				this.sandbox.subscribe("GetPreviewHtml", this.getPreviewHtml, this);
				this.sandbox.subscribe("ContentStructureItemAction", this.onStructureItemAction, this,
					["ContentBlockStructurePage", "ContentSectionPropertiesPage", "ContentNavbarPropertiesPage"]);
				this.sandbox.subscribe("OpenMacrosDialog", this.openMacrosColumnsPage, this);
				this.sandbox.subscribe("HtmlContentBuilderModeChanged", this.onHtmlContentBuilderModeChanged, this);
				if (this.isMjmlConfig()) {
					this.sandbox.subscribe("SetContentItemSelected", this.onContentItemSelected, this,
						["BreadcrumbsPanel"]);
					this.sandbox.subscribe("BlockSaved", this.onBlockSaved, this,
						[this._getContentUserBlockEditModuleId()]);
					this.sandbox.subscribe("SaveBlockCancel", this.onSaveBlockCancel, this,
						[this._getContentUserBlockEditModuleId()]);
					this.sandbox.subscribe("IsEmailMacroAvailable", this.isEmailMacroAvailable, this);
				}
			},

			/**
			 * Defines visibility of macro buttons.
			 * @protected
			 */
			isEmailMacroAvailable: function() {
				return false;
			},

			/**
			 * Updates config of active content item.
			 * @protected
			 * @param {Object} itemConfig Updated content item config.
			 */
			updateContentItemConfig: function(itemConfig) {
				var selectedItem = this.get("SelectedContentItem");
				var skipProps = ["ItemType", "Items"];
				BPMSoft.each(itemConfig, function(value, name) {
					if (!_.contains(skipProps, name)) {
						selectedItem.set(name, value);
					}
				}, this);
				this._extendWithBreadcrumbs(itemConfig);
			},

			/**
			 * Returns config object of current sheet view model.
			 * @protected
			 * @virtual
			 * @param {Boolean} withElementInfo Defines if config is extended with properties page info.
			 * @returns {Object} Sheet properties page config.
			 */
			getEditConfig: function(withElementInfo) {
				var config = {
					ItemType: "sheet",
					Width: this.$Width,
					BreakpointWidth: this.$BreakpointWidth,
					BackgroundColor: this.$BackgroundColor
				};
				if (withElementInfo) {
					config.ElementInfo = {
						Type: config.ItemType,
						DesignTimeConfig: {
							Caption: this.get("Resources.Strings.PropertiesPageCaption")
						},
						Settings: {
							schemaName: "TemplatePropertiesPage",
							panelIcon: this.get("Resources.Images.PropertiesPageIcon"),
							contextHelpText: this.get("Resources.Strings.PropertiesPageContextHelp"),
							isStylesVisible: false
						}
					};
				}
				return config;
			},

			/**
			 * Publishes selected content item config with specified message for specified modules.
			 * @protected
			 * @param {String} message Message name.
			 * @param {Array} moduleNames List of module names to publish message.
			 */
			publishContentItemConfig: function(message, moduleNames) {
				var config = this._getSelectedItemConfig();
				this._extendWithBreadcrumbs(config);
				this.sandbox.publish(message, config, moduleNames);
			},

			/**
			 * Handles macros receiving.
			 * @protected
			 * @param {String} macros Macros.
			 */
			onGetMacros: function(macros) {
				this.$SelectedContentItem.set("SelectedText", macros);
			},

			/**
			 * Returns selected block.
			 * @protected
			 * @deprecated
			 * @param {BPMSoft.core.collections.Collection} items Items collection.
			 * @return {BPMSoft.ContentBlockViewModel} Content block.
			 */
			getSelectedBlock: function(items) {
				var result = this.getSelectedItem(items);
				if (result && result.$ItemType === "blockgroup") {
					result = result.getActiveBlock();
				}
				return result;
			},

			/**
			 * Returns selected block group.
			 * @protected
			 * @deprecated
			 * @param {BPMSoft.core.collections.Collection} items Items collection.
			 * @param {String} blockId Identifier of active block.
			 * @return {BPMSoft.ContentBlockGroupViewModel} Content block group.
			 */
			getSelectedGroup: function(items, blockId) {
				return items.findByFn(function(item) {
					return item.$ItemType === "blockgroup" && item.$Selected === true
						&& (!blockId || item.$Items.contains(blockId));
				});
			},

			/**
			 * Returns selected item.
			 * @protected
			 * @param {BPMSoft.core.collections.Collection} items Items collection.
			 */
			getSelectedItem: function(items) {
				var result = null;
				items.each(function(item) {
					if (item.get("Selected") === true) {
						result = item;
						return false;
					}
				}, this);
				return result;
			},

			/**
			 * Returns object link for entity.
			 * @protected
			 * @param {Object} config Configuration object.
			 * @param {String} config.recordId Record id.
			 * @param {String} config.schemaName Schema name.
			 * @return {String} Url for object.
			 */
			getObjectLink: function(config) {
				var linkHrefTpl = "{0}?schemaName={1}&recordId=";
				var recordIdTpl = Ext.String.format("[#{0}#]", config.recordId);
				var loaderPath = BPMSoft.loaderBaseUrl;
				if (!Ext.String.endsWith(loaderPath, "/")) {
					loaderPath = loaderPath.concat("/");
				}
				var requestUrl = loaderPath.concat(this.$NavigationPath);
				var linkHref = Ext.String.format(linkHrefTpl, requestUrl, config.schemaName);
				if (BPMSoft.Features.getIsEnabled("UseFirebaseDynamicLinks")) {
					var template = this.get("FirebaseDynamicLinksTemplate");
					return Ext.String.format(template, encodeURIComponent(linkHref) + recordIdTpl);
				} else {
					return linkHref + recordIdTpl;
				}
			},

			/**
			 * Returns current sheet config when config is for MJML.
			 * @protected
			 * @returns {BPMSoft.BaseViewModel} Item view model to be selected.
			 */
			getDefaultItemToSelect: function() {
				if (this.isMjmlConfig()) {
					return this;
				}
				return null;
			},

			/**
			 * Handler 'itemChanged' event of BPMSoft.Collection collection.
			 * @protected
			 * @param {BPMSoft.BaseViewModel} item Collection changed item.
			 * @param {Object} config Event parameters.
			 */
			itemChanged: function(item, config) {
				/*eslint-disable spellcheck/spell-checker*/
				switch (config.event) {
					case "ondragover":
						this.onItemDragOver.apply(this, config.arguments);
						break;
					case "ondragdrop":
						this.onItemDragDrop.apply(this, config.arguments);
						break;
					case "oninvaliddrop":
						this.onItemInvalidDrop.apply(this, config.arguments);
						break;
					case "oncopy":
						this.onItemCopy(config.arguments);
						break;
					case "onremove":
						this.onItemRemove(config.arguments.Id);
						break;
					case "onsave":
						this.onItemSave(config.arguments.Id);
						break;
					case "onselected":
						this.onItemSelected(config.arguments);
						break;
					case "macrobuttonclicked":
						this.insertMacros(config.arguments);
						break;
					case "emailtemplatelinkclicked":
						this.openObjectLinkPage();
						break;
					case "selectedtextchanged":
						this.set("SelectedText", config.arguments[0]);
						break;
					case "onedit":
						this.onItemEdit(config.arguments);
						break;
					case "elementSelected":
						this.onElementSelected(config.arguments.id);
						break;
					case "onelementcopy":
						this.onElementCopy(config.arguments);
						break;
					case "onelementmoved":
						this.onElementMoved(config.arguments);
						break;
					case "onitemconfigchanged":
						this.publishContentItemConfig.apply(this, config.arguments);
						break;
					default:
				}
				/*eslint-enable spellcheck/spell-checker*/
			},

			/**
			 * Process opening email template object link page.
			 * @protected
			 */
			openObjectLinkPage: function() {
				var contentBuilderConfig = this.get("ContentBuilderConfig");
				var macrosEntity = contentBuilderConfig && contentBuilderConfig.MacrosEntity;
				if (Ext.isEmpty(macrosEntity)) {
					var emptyTemplateMessage = this.get("Resources.Strings.EmptyMacrosEntityMessage");
					this.showInformationDialog(emptyTemplateMessage);
				} else {
					BPMSoft.StructureExplorerUtilities.open({
						scope: this,
						handlerMethod: this.onObjectLinkSelected,
						moduleName: "StructureExploreModuleV2",
						moduleConfig: {
							useBackwards: false,
							schemaName: macrosEntity,
							viewModelClassName: "BPMSoft.ObjectLinkStructureExplorerViewModel",
							viewConfigClassName: "BPMSoft.ObjectLinkStructureExplorerView"
						}
					});
				}
			},

			/**
			 * Handles event selecting email template object link.
			 * @protect
			 * @param {Object} columnInfo Selected email template object link parameters.
			 */
			onObjectLinkSelected: function(columnInfo) {
				this.$SelectedContentItem.set("SelectedText", "");
				var schemaName = this.getLinkSchemaName(columnInfo);
				var linkIdPath = this.getLinkFullIdPath(columnInfo);
				var linkHref = this.getObjectLink({
					schemaName: schemaName,
					recordId: linkIdPath
				});
				var linkTpl = "<a href='{0}' style='color:{1};'>{2}</a>";
				var linkDisplayValue = this.formatMacrosColumn(columnInfo.leftExpressionColumnPath);
				var linkColor = columnInfo.linkColor || "#0000EE";
				var link = Ext.String.format(linkTpl, linkHref, linkColor, linkDisplayValue);
				this.$SelectedContentItem.set("SelectedText", link);
			},

			/**
			 * Gets email template object link schema name.
			 * @protect
			 * @param {Object} columnInfo Selected email template object link parameters.
			 * @return {String} Email template object link schema name.
			 */
			getLinkSchemaName: function(columnInfo) {
				var referenceSchemaName = columnInfo.referenceSchemaName;
				if (referenceSchemaName) {
					return referenceSchemaName;
				}
				var columnInfoPath = columnInfo.path;
				var contentBuilderConfig = this.get("ContentBuilderConfig");
				if (columnInfoPath.length === 1 && contentBuilderConfig) {
					return contentBuilderConfig.MacrosEntity;
				}
				var schemaName = this.get("ContentBuilderConfig").MacrosEntity;
				BPMSoft.each(columnInfoPath, function(columnName) {
					var schema = BPMSoft[schemaName];
					var column = schema.getColumnByName(columnName);
					if (!column.referenceSchemaName) {
						return false;
					}
					schemaName = column.referenceSchemaName;
				}, this);
				return schemaName;
			},

			/**
			 * Gets email template object link full path identifier.
			 * @protect
			 * @param {Object} columnInfo Selected email template object link parameters.
			 * @return {String} Email template object link full path identifier.
			 */
			getLinkFullIdPath: function(columnInfo) {
				var columnPath = columnInfo.leftExpressionColumnPath;
				var referenceSchema = columnInfo.referenceSchemaName;
				var idColumn = "Id";
				if (columnPath.lastIndexOf(".") < 0 && Ext.isEmpty(referenceSchema)) {
					return idColumn;
				}
				var linkFullIdPath = !Ext.isEmpty(referenceSchema)
					? columnPath
					: columnPath.substring(0, columnPath.lastIndexOf("."));
				return linkFullIdPath.concat(".", idColumn);
			},

			insertMacros: function(args) {
				var macrosType = args[0];
				switch (macrosType) {
					case "macros":
						this.openMacrosPage();
						break;
					case "column":
						this.openMacrosColumnsPage();
						break;
					default:
						throw Ext.create("BPMSoft.UnsupportedTypeException " + macrosType);
				}
			},

			/**
			 * Open entity structure explorer module for select column macros.
			 * @protected
			 */
			openMacrosColumnsPage: function() {
				var contentBuilderConfig = this.get("ContentBuilderConfig");
				var macrosEntity = contentBuilderConfig && contentBuilderConfig.MacrosEntity;
				if (Ext.isEmpty(macrosEntity)) {
					var emptyTemplateMessage = this.get("Resources.Strings.EmptyMacrosEntityMessage");
					this.showInformationDialog(emptyTemplateMessage);
				} else {
					BPMSoft.StructureExplorerUtilities.open({
						scope: this,
						handlerMethod: this.onMacrosColumnSelected,
						moduleConfig: {
							useBackwards: false,
							schemaName: macrosEntity
						}
					});
				}
			},

			/**
			 * Returns default block config with one smart block element.
			 * @protected
			 * @param {String} content Template content.
			 * @param {Boolean} isHtmlMode Flag to indicate html mode state.
			 * @returns {Object}
			 */
			getDefaultBlockConfig: function(content, isHtmlMode) {
				if (isHtmlMode) {
					return this.createItemViewModel({
						ItemType: "htmlblock",
						Items: [{
							ItemType: BPMSoft.ContentBuilderBodyItemType.mjraw.value,
							Content: content,
							HtmlSrc: content
						}]
					});
				}
				return this.createItemViewModel({
					ItemType: "mjblock",
					Items: [{
						ItemType: "section",
						Items: [{
							ItemType: "column",
							Items: [{
								ItemType: BPMSoft.ContentBuilderBodyItemType.mjraw.value,
								Content: content,
								HtmlSrc: content
							}]
						}]
					}]
				});
			},

			/**
			 * Converts current content config for specified html mode state.
			 * @protected
			 * @param {Boolean} isHtmlMode Flag to indicate html mode state.
			 */
			convertTemplateForState: function(isHtmlMode) {
				var html = this.getPreviewHtml();
				this.$Items.clear();
				var defaultBlock = this.getDefaultBlockConfig(html, isHtmlMode);
				this.$Items.add(defaultBlock.$Id, defaultBlock);
			},

			/**
			 * Handler on HTML content builder mode change event.
			 * @protected
			 * @param {Boolean} isHtmlMode Flag to indicate html mode state.
			 */
			onHtmlContentBuilderModeChanged: function(isHtmlMode) {
				this.convertTemplateForState(isHtmlMode);
				var config = this.serializeViewModel();
				var state = this.getContentBuilderState(config);
				this.$ContentBuilderState = state;
			},

			/**
			 * Handles changes preview unit.
			 * @protected
			 * @param {BPMSoft.BaseViewModel} item The modified element.
			 * @param {Object} config Changes configuration.
			 * @param {String} config.event The name of change action.
			 * @param {String} config.arguments Change action arguments.
			 */
			previewItemChanged: function(item, config) {
				/*eslint-disable spellcheck/spell-checker*/
				switch (config.event) {
					case "ondragover":
						this.onPreviewDragOver.apply(this, config.arguments);
						break;
					case "ondragdrop":
						this.onPreviewDragDrop.apply(this, config.arguments);
						break;
					case "oninvaliddrop":
						this.onPreviewInvalidDrop.apply(this, config.arguments);
						break;
					default:
				}
				/*eslint-enable spellcheck/spell-checker*/
			},

			/**
			 * Getting position of the element in the container.
			 * @protected
			 * @param {String} key Desired element key.
			 * @return {Number} Position of an element in the container.
			 */
			indexOf: function(key) {
				var viewModelItems = this.get("Items");
				var viewModelItemsKeys = viewModelItems.getKeys();
				return viewModelItemsKeys.indexOf(key);
			},

			/**
			 * Adds item to collection.
			 * @protected
			 * @param {BPMSoft.model.BaseViewModel} viewModelItem Presentation model of element.
			 * @return {Boolean} Operation result.
			 */
			addItem: function(viewModelItem) {
				var viewModelItemId = viewModelItem.get("Id");
				var viewModelItems = this.get("Items");
				var itemIndex = this.indexOf(viewModelItemId);
				var reorderableIndex = this.get("ReorderableIndex");
				if (Ext.isEmpty(reorderableIndex)) {
					if (itemIndex === -1) {
						viewModelItems.add(viewModelItemId, viewModelItem);
					} else {
						return false;
					}
				} else {
					viewModelItems.removeByKey(viewModelItemId);
					if (itemIndex === -1 || (reorderableIndex <= itemIndex)) {
						reorderableIndex += 1;
					}
					viewModelItems.insert(reorderableIndex, viewModelItemId, viewModelItem);
				}
				this.set("ReorderableIndex", null);
				return true;
			},

			/**
			 *  Handler for block drag over event.
			 * @protected
			 * @param {BPMSoft.ContentBuilderElementViewModel} item Block element view model.
			 * @param {String} blockId Identifier of the crossed content block.
			 */
			onBlockDragOver: function(item, blockId) {
				this.onItemDragOver(blockId);
			},

			/**
			 * Handles events of block insertion.
			 * @protected
			 * @param {BPMSoft.ContentBuilderElementViewModel} item Grid element view model.
			 */
			onBlockDragDrop: function(item) {
				var viewModelConfig = item.$BlockConfig || {
					ItemType: item.$ItemType
				};
				var elementViewModel = this.isMjmlConfig()
					? this.createItemViewModel(viewModelConfig)
					: this.createContentBuilderHelper().toViewModel(viewModelConfig);
				this.addItem(elementViewModel);
				elementViewModel.set("Selected", true);
				this.$SelectedContentItem = elementViewModel;
			},

			/**
			 * Handles events of block invalid drop.
			 * @protected
			 */
			onBlockInvalidDrop: function() {
				this.set("ReorderableIndex", null);
			},

			/**
			 * Handles events on dragging the preview element insertion area.
			 * @protected
			 * @param {String} overItemTag The tag element on which a drag.
			 */
			onPreviewDragOver: function(overItemTag) {
				this.onItemDragOver(overItemTag);
			},

			/**
			 * Handles events of invalid dragging the preview item.
			 * @protected
			 * @param {String} overItemTag The tag of insertion element.
			 */
			onPreviewInvalidDrop: function(overItemTag) {
				this.onItemInvalidDrop(overItemTag);
			},

			/**
			 * Handles events of insertion element preview.
			 * @protected
			 * @param {String} tag The tag of insertion element.
			 */
			onPreviewDragDrop: function(tag) {
				var previewItems = this.get("PreviewItems");
				var block = previewItems.get(tag);
				var elementClone = this.cloneContentElement(block);
				this.addItem(elementClone);
			},

			/**
			 * Handles events of invalid dragging block.
			 * @protected
			 * @param {String} tag The tag of insertion element.
			 */
			onItemInvalidDrop: function() {
				this.set("ReorderableIndex", null);
			},

			/**
			 * Handles events on the drag block under insertion area.
			 * @protected
			 * @param {String} overItemTag The tag element on which a drag.
			 */
			onItemDragOver: function(overItemTag) {
				this.set("ReorderableIndex", null);
				var keys = this.$Items.getKeys();
				var index = overItemTag ? keys.indexOf(overItemTag) : keys.length - 1;
				this.set("ReorderableIndex", index);
			},

			/**
			 * Handles block insertion events.
			 * @protected
			 * @param {String} itemId The element identifier.
			 */
			onItemDragDrop: function(itemId) {
				var viewModelItems = this.get("Items");
				var viewModelItem = viewModelItems.get(itemId);
				this.addItem(viewModelItem);
			},

			/**
			 * Handles block drag out events.
			 * @protected
			 */
			onItemDragOut: function() {
				this.set("ReorderableIndex", null);
			},

			/**
			 * Creates a copy of a content element.
			 * @protected
			 * @param {BPMSoft.BaseViewModel} viewModel content element model.
			 * @return {BPMSoft.BaseViewModel} A copy of the content element model.
			 */
			cloneContentElement: function(viewModel) {
				var contentBuilderHelper = this.createContentBuilderHelper();
				var config = contentBuilderHelper.toJSON(viewModel);
				return contentBuilderHelper.toViewModel(config);
			},

			/**
			 * Handles events of highlight child element.
			 * @protected
			 * @param {Object} config Configuration object.
			 */
			onItemSelected: function(config) {
				if (!config.value) {
					return;
				}
				this.set("ContentSheetSelected", false);
				var itemId = config.Id;
				this._unselectCurrentElement(itemId);
				var selectedItem = this.$Items.findByFn(function(item) {
					return item.$Id === itemId;
				});
				var element = selectedItem;
				if (element && element.$ItemType === "blockgroup") {
					element = element.getActiveBlock();
				}
				this.set("SelectedContentItem", element);
			},

			/**
			 * Handles events of block copy.
			 * @protected
			 * @param {Object} config Configuration object.
			 */
			onItemCopy: function(config) {
				var id = config.Id;
				var block = this.$Items.get(id);
				var sourceBlockIndex = this.$Items.indexOf(block);
				if (this.isMjmlConfig()) {
					var itemConfig = block.serializeViewModel();
					this.addChildItem(itemConfig, sourceBlockIndex);
				} else {
					var elementClone = this.cloneContentElement(block);
					var cloneId = elementClone.get("Id");
					this.$Items.insert(sourceBlockIndex, cloneId, elementClone);
				}
			},

			/**
			 * Shows modal box for module.
			 * @protected
			 * @param {String} moduleId Module identifier.
			 * @param {Object} modalBoxConfig Modal box config.
			 */
			showModuleModalBox: function(moduleId, modalBoxConfig) {
				var renderTo = ModalBox.show(modalBoxConfig, function() {
					this.sandbox.unloadModule(moduleId, renderTo);
				}, this);
				return renderTo.id;
			},

			/**
			 * Loads ContentUserBlockEditModule.
			 * @protected
			 * @param {String} moduleId Id module for sandbox.
			 * @param {String} moduleName Name of module.
			 * @param {Guid} blockId Block identifier for put in edit page view model.
			 */
			loadContentUserBlockEditModule: function(moduleId, moduleName, blockId) {
				var modalBoxConfig = {
					heightPixels: 430,
					widthPixels: 630
				};
				var windowRenderTo = this.showModuleModalBox(moduleId, modalBoxConfig);
				this.sandbox.loadModule(moduleName, {
					renderTo: windowRenderTo,
					id: moduleId,
					parameters: {
						viewModelConfig: {
							BlockId: blockId
						}
					}
				});
			},

			/**
			 * Handles events of block save.
			 * @protected
			 * @param {Object} blockId Block identifier.
			 */
			onItemSave: function(blockId) {
				var block = this.$Items.get(blockId);
				var moduleName = "ContentUserBlockEditModule";
				this.loadContentUserBlockEditModule(this._getContentUserBlockEditModuleId(), moduleName, block.$Id);
			},

			/**
			 * Handles events of block edit.
			 * @protected
			 * @param {Object} config Configuration object.
			 */
			onItemEdit: function(config) {
				var contentBlock = this.$Items.get(config.Id);
				if (contentBlock.$ItemType === "blockgroup") {
					contentBlock = contentBlock.getActiveBlock();
				}
				var blockConfig = this.createContentBuilderHelper().toJSON(contentBlock);
				this.set("BlockConfig", blockConfig);
				this.set("IsContentBlockDesignerVisible", true);
			},

			/**
			 * Handles events of removing block.
			 * @protected
			 * @param {String} id Block identifier.
			 */
			onItemRemove: function(id) {
				var index = this.indexOf(id);
				if (index === this.$Items.getCount() - 1) {
					index--;
				}
				this.$Items.removeByKey(id);
				var selectedItem = this.$Items.findByIndex(index) || this.getDefaultItemToSelect();
				selectedItem && selectedItem.set("Selected", true);
				if (selectedItem && selectedItem.$ItemType === "blockgroup") {
					selectedItem = selectedItem.getActiveBlock();
				}
				this.$SelectedContentItem = selectedItem;
			},

			/**
			 * Sets content block in group properties.
			 * @protected
			 * @virtual
			 * @param {BPMSoft.ContentBlockViewModel} block Block view model.
			 * @param {BPMSoft.ContentBlockViewModel} group Group view model.
			 */
			initContentBlockInGroup: function(block, group) {
				block.$GroupId = group.$Id;
			},

			/**
			 * Handles events on after content block editing.
			 * @protected
			 * @param {Object} blockConfig Block config.
			 */
			onCloseContentBlockDesigner: function(blockConfig) {
				if (blockConfig) {
					var blocksCollection = this.$Items;
					var selectedItem = this.getSelectedItem(this.$Items);
					var editSelectedItem = this.createContentBuilderHelper().toViewModel(blockConfig);
					if (selectedItem.$ItemType === "blockgroup") {
						this.initContentBlockInGroup(editSelectedItem, selectedItem);
						blocksCollection = selectedItem.$Items;
						selectedItem = selectedItem.getActiveBlock();
					} else {
						this.setItemTools(editSelectedItem);
						editSelectedItem.set("Selected", true);
					}
					editSelectedItem.$Id = selectedItem.$Id;
					var selectedItemIndex = blocksCollection.indexOf(selectedItem);
					blocksCollection.remove(selectedItem);
					blocksCollection.add(editSelectedItem.$Id, editSelectedItem, selectedItemIndex);
					this.$SelectedContentItem = editSelectedItem;
				}
				this.set("IsContentBlockDesignerVisible", false);
			},

			/**
			 * Sets item tools visibility.
			 * @protected
			 * @virtual
			 */
			setItemTools: BPMSoft.emptyFn,

			/**
			 * Handles "loaded" event of right panel.
			 * @protected
			 */
			onRightPanelLoaded: function() {
				this.hideBodyMask();
				if (this.isMjmlConfig() && !this.$SelectedContentItem) {
					this.set("SelectedContentItem", this, { silent: true });
					this.showBodyMask();
				}
				this.onSelectedContentItemChange();
			},

			/**
			 * Handles "loaded" event of the item panel.
			 * @protected
			 */
			onItemPanelLoaded: function() {
				this.hideBodyMask();
			},

			/**
			 * Handles changes of selected content item.
			 * @protected
			 */
			onSelectedContentItemChange: function() {
				if (this.$RightPanelVisible && this._canPublishConfig()) {
					this.publishContentItemConfig("ActiveContentItemChanged", ["ContentPanelLoader"]);
				}
				this._updatePanelVisibility();
			},

			/**
			 * Handles events of button click canvas settings.
			 * @protected
			 */
			onContentSheetSettingButtonClick: function() {
				this.$ContentSheetSelected = !this.$ContentSheetSelected;
			},

			/**
			 * Handles events of highlight element.
			 * @protected
			 * @virtual
			 * @param {String} itemId Element Id.
			 */
			onElementSelected: function(itemId) {
				this.set("ContentSheetSelected", false);
				this._unselectCurrentElement(itemId);
				var element = this._findElementById(this.$Items, itemId) || this.getDefaultItemToSelect();
				this.set("SelectedContentItem", element);
			},

			/**
			 * Handles element highlighting by id.
			 * @protected
			 * @param {String} itemId Element Id.
			 */
			onContentItemSelected: function(itemId) {
				var contentItem = this._findElementById(this.$Items, itemId) || this.getDefaultItemToSelect();
				this._switchSelectedItem(contentItem);
			},

			/**
			 * Forms BPMSoft.InsertQuery for insert ContentUserBlock.
			 * @protected
			 * @param blockName Content user block name.
			 * @param blockConfig JSON representation of saved mj-block.
			 * @param imageId Preview image identifier for content user block.
			 * @returns {BPMSoft.InsertQuery} Query for insert block.
			 */
			getContentUserBlockInsertQuery: function(blockName, blockConfig, imageId) {
				var insert = Ext.create("BPMSoft.InsertQuery", {
					rootSchemaName: "ContentUserBlock"
				});
				insert.setParameterValue("Name", blockName, BPMSoft.DataValueType.TEXT);
				insert.setParameterValue("Config", blockConfig, BPMSoft.DataValueType.TEXT);
				insert.setParameterValue("Image", imageId, BPMSoft.DataValueType.GUID);
				return insert;
			},

			/**
			 * Handles content user block saved action.
			 * @protected
			 * @param {Object} savingData Object contains saving block blockName and previewImage.
			 */
			onBlockSaved: function(savingData) {
				BPMSoft.ImageApi.uploadUsingDataUrl({
					fileName: "ContentUserBlock" + savingData.blockName + ".png",
					dataUrl: savingData.previewImage,
					onComplete: function(imageId) {
						var blockJson = JSON.stringify(this.$SelectedContentItem.serializeViewModel());
						var contentUserBlockInsertQuery = this.getContentUserBlockInsertQuery(savingData.blockName,
							blockJson, imageId);
						contentUserBlockInsertQuery.execute(function(result) {
							if (result.success) {
								this.loadUserBlocks(BPMSoft.emptyFn, this);
							}
						}, this);
					},
					scope: this
				});
				ModalBox.close();
			},

			/**
			 * Removes content user block by id.
			 * @protected
			 * @param blockId Content user block identifier.
			 */
			removeContentUserBlock: function(blockId) {
				var deleteQuery = Ext.create("BPMSoft.DeleteQuery", {
					rootSchemaName: "ContentUserBlock"
				});
				deleteQuery.filters.addItem(
					deleteQuery.createColumnFilterWithParameter(BPMSoft.ComparisonType.EQUAL, "Id", blockId));
				deleteQuery.execute(function(result) {
					if (result.success) {
						this.loadUserBlocks(BPMSoft.emptyFn, this);
					}
				}, this);
			},

			/**
			 * Handles content user block save action canceled.
			 * @protected
			 * @param {String} itemId Element Id.
			 */
			onSaveBlockCancel: function() {
				ModalBox.close();
			},

			/**
			 * Handles events of element copy.
			 * @protected
			 * @param {Object} config Configuration object.
			 */
			onElementCopy: function(config) {
				var container = config.container;
				var elementId = config.id;
				var element = container.$Items.get(elementId);
				var sourceElIndex = container.$Items.indexOf(element);
				if (this.isMjmlConfig()) {
					var itemConfig = element.serializeViewModel();
					container.addChildItem(itemConfig, sourceElIndex);
				} else {
					var elementClone = this.cloneContentElement(element);
					container.$Items.insert(sourceElIndex, elementClone.$Id, elementClone);
				}
			},

			/**
			 * Handles events of element move.
			 * @protected
			 * @param {Object} config Configuration object.
			 */
			onElementMoved: function(config) {
				var target = config.target;
				var element = config.element;
				var elementClone = {};
				if (this.isMjmlConfig()) {
					var itemConfig = element.serializeViewModel();
					elementClone = target.createItemViewModel(itemConfig);
				} else {
					elementClone = this.cloneContentElement(element);
				}
				target.addItem(elementClone);
				elementClone.set("Selected", true);
				element.fireEvent("change", element, {
					event: "onremove",
					arguments: {
						Id: element.$Id,
						silent: true
					}
				});
			},

			/**
			 * Saves content builder.
			 * @protected
			 */
			save: BPMSoft.emptyFn,

			/**
			 * Handles content builder saving.
			 * @protected
			 */
			onSaved: BPMSoft.emptyFn,

			/**
			 * Cancels content builder changes.
			 * @protected
			 */
			cancel: function() {
				BPMSoft.utils.showMessage({
					caption: this.get("Resources.Strings.CancelMessage"),
					buttons: ["Ok", "Cancel"],
					defaultButton: 0
				});
			},

			/**
			 * Block adding handler.
			 * @protected
			 * @param {BPMSoft.ContentBlockViewModel} contentBlock Added block
			 */
			onContentBlockAdd: function(viewModelItem) {
				this.subscribeGroupElementsEvents(viewModelItem);
			},

			/**
			 * Delete block handler.
			 * @protected
			 * @param {BPMSoft.ContentBlockViewModel} contentBlock Removed block
			 */
			onContentBlockRemove: function(viewModelItem) {
				this.unsubscribeGroupElementsEvents(viewModelItem);
			},

			/**
			 * Loading data into collection handler.
			 * @protected
			 */
			onDataLoaded: function() {
				this.$Items.each(function(viewModelItem) {
					this.subscribeGroupElementsEvents(viewModelItem);
				}, this);
			},

			/**
			 * Clear collection handler.
			 * @protected
			 */
			onClear: BPMSoft.emptyFn,

			/**
			 * Executes width values validation in input field< if validation passed,
			 * sets template width with this value.
			 * @protected
			 */
			onContentSheetWidthChanged: function() {
				var columnName = "ContentSheetWidth";
				if (this.validateColumn(columnName)) {
					var width = this.get(columnName);
					this.set("Width", width);
				}
			},

			/**
			 * Validates input width value, if the validation has passed, sets width of template.
			 * @protected
			 * @param {Number} value Template Width.
			 * @return {Object} Validation result.
			 */
			widthRangeValidator: function(value) {
				var invalidMessage = "";
				var minMessage = this.get("Resources.Strings.WidthIncorrectMinValueValidationMessage");
				var maxMessage = this.get("Resources.Strings.WidthIncorrectMaxValueValidationMessage");
				var minValue = 300;
				var maxValue = 1350;
				if (value > maxValue) {
					invalidMessage = Ext.String.format(maxMessage, maxValue);
				} else if (value < minValue) {
					invalidMessage = Ext.String.format(minMessage, minValue);
				}
				return {
					fullInvalidMessage: invalidMessage,
					invalidMessage: invalidMessage
				};
			},

			/**
			 * Returns configuration block preview objects array.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Context object.
			 * @return {Array} Configuration block preview objects array
			 */
			getContentSheetConfig: function(callback, scope) {
				var config = {
					ItemType: "sheet",
					Items: []
				};
				callback.call(scope, config);
			},

			/**
			 * Returns current exporter.
			 * @protected
			 * @return {BPMSoft.BaseContentExporter} Content exporter.
			 */
			getContentExporter: function(config) {
				return this.$ContentExporterFactory.getExporter(config);
			},

			/**
			 * Loads preview module.
			 * @protected
			 */
			openPreviewModule: function() {
				this.$IsPreviewVisible = true;
			},

			/**
			 * Generates preview module identifier.
			 * @protected
			 * @return {String} Preview module identifier.
			 */
			getPreviewModuleId: function() {
				return this.sandbox.id + "_ContentBuilderPreviewModule";
			},

			/**
			 * Creates instance of BPMSoft.ContentBuilderHelper.
			 * @protected
			 * @return {BPMSoft.ContentBuilderHelper} Instance of BPMSoft.ContentBuilderHelper.
			 */
			createContentBuilderHelper: function() {
				return new BPMSoft.ContentBuilderHelper({
					sandbox: this.sandbox,
					isMjmlConfig: this.isMjmlConfig()
				});
			},

			/**
			 * Hides right panel.
			 * @protected
			 */
			hideContentItemPanel: function() {
				this.set("RightPanelVisible", false);
			},

			/**
			 * Shows right panel.
			 * @protected
			 */
			showContentItemPanel: function() {
				this.set("RightPanelVisible", true);
			},

			/**
			 * Returns state of the content settings panel visibility.
			 * @protected
			 */
			isRightPanelEnabled: function() {
				return this.get("RightPanelVisible")
					&& BPMSoft.Features.getIsEnabled("ContentBuilderPropertiesPanel");
			},

			/**
			 * Handler of the click on the search button.
			 */
			onSearchButtonClick: function() {
				this._filteredPreviewItems();
			},

			/**
			 * Handler on search user block button click.
			 * @protected
			 */
			onSearchUserBlockButtonClick: function() {
				this._filterUserBlockItems();
			},

			/**
			 * Handler of the click on the clear button.
			 */
			onSearchClearTemplateButtonClick: function() {
				this.$SearchTemplateName = "";
				this._filteredPreviewItems();
			},

			/**
			 * Handler on clear search results button click.
			 * @protected
			 */
			onSearchUserBlockClearButtonClick: function() {
				this.$SearchTemplateName = "";
				this._filterUserBlockItems();
			},

			/**
			 * Handler on select content sheet button click.
			 * @protected
			 */
			onContentSheetSelectedClick: function() {
				this._unselectCurrentElement();
				this.$SelectedContentItem = this;
			},

			/**
			 * Returns search template container style.
			 * @return {Object}
			 */
			getSearchTemplateStyle: function() {
				return {
					"is-focused": this.$IsSearchTemplateFocused
				};
			},

			/**
			 * Returns feature state of the new content builder with MJML support.
			 * @protected
			 * @return {Boolean}
			 */
			isMjmlContentBuilderEnabled: function() {
				return BPMSoft.Features.getIsEnabled("MjmlContentBuilder");
			},

			/**
			 * Returns feature state of the new content builder with MJML support.
			 * @protected
			 * @return {Boolean}
			 */
			isBlockLibraryVisible: function() {
				return this.isGridConfig() && this.get("UseBlockLibrary");
			},

			/**
			 * Shows information message about content builder error state.
			 * @protected
			 */
			showStateErrorMessage: function() {
				var featureName = "MjmlContentBuilder";
				var stateErrorMessageText = this.get("Resources.Strings.ContentBuilderStateErrorMessage");
				var stateErrorMessage = Ext.String.format(stateErrorMessageText, featureName);
				this.showInformationDialog(stateErrorMessage);
			},
			/**
			 * Handles user block delete icon click event.
			 * @protected
			 */
			onUserBlockDeleteIconClick: function(block) {
				BPMSoft.showMessage({
					caption: this.get("Resources.Strings.DeleteUserBlockQuestion").replace('{0}', block.$Caption),
					buttons: ["no", "yes"],
					defaultButton: 0,
					style: BPMSoft.MessageBoxStyles.ORANGE,
					scope: this,
					handler: function(buttonCode) {
						if (buttonCode === "yes") {
							this.removeContentUserBlock(block.$Id);
						}
					}
				});
			},

			/**
			 * @inheritdoc BaseContentItemViewModel#extendChildrenItemTypes
			 */
			extendChildrenItemTypes: BPMSoft.emptyFn,

			/**
			 * @inheritdoc BaseContentItemViewModel#serializableSlicePropertiesCollection
			 */
			extendSerializableSlicePropertiesCollection: BPMSoft.emptyFn,

			/**
			 * Returns sheet scrollable container element.
			 * @protected
			 * @returns {DOMElement} Container DOM element.
			 */
			getSheetScrollabeElement: function() {
				return Ext.get("ContentBuilderSheetContainer");
			},

			/**
			 * Returns default drag & drop container scroll config.
			 * @protected
			 * @returns {Object} Scroll config.
			 */
			getDefaultDragDropScrollConfig: function() {
				return {
					vthresh: 50,
					hthresh: -1,
					frequency: 400,
					increment: 200
				};
			},

			/**
			 * Handler on sheet container after render event.
			 * Registers scrollable container and container scroll handler.
			 * @protected
			 */
			onSheetContainerAfterRender: function() {
				Ext.dd.DragDropManager.useCache = false;
				var scrollEl = this._registerSheetScrollableContainer();
				if (scrollEl) {
					scrollEl.on("scroll", this._refreshDropZones, this);
				}
			},

			/**
			 * Handler on sheet container after rerender event.
			 * Reregisters scrollable container.
			 * @protected
			 */
			onSheetContainerAfterReRender: function() {
				this._registerSheetScrollableContainer();
			},

			/**
			 * @inheritdoc BPMSoft.BaseObject#onDestroy
			 * @override
			 */
			onDestroy: function() {
				var scrollEl = this.getSheetScrollabeElement();
				if (scrollEl) {
					scrollEl.un("scroll", this._refreshDropZones, this);
					Ext.dd.ScrollManager.unregister(scrollEl);
				}
				this.callParent(arguments);
			}
		},
		diff: [
			{
				"operation": "insert",
				"name": "MainContainer",
				"values": {
					"classes": {
						"textClass": "center-panel",
						"wrapClassName": ["content-builder-container"]
					},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "LeftControlGroup",
				"parentName": "MainContainer",
				"propertyName": "items",
				"index": 0,
				"values": {
					"classes": {
						"wrapClass": ["left-control-group"]
					},
					"itemType": BPMSoft.ViewItemType.CONTROL_GROUP,
					"caption": "$Resources.Strings.PreviewBlockCaption",
					"visible": "$isBlockLibraryVisible",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "FilterContainer",
				"parentName": "LeftControlGroup",
				"propertyName": "items",
				"values": {
					"wrapClass": ["filter-container"],
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SearchTemplate",
				"parentName": "FilterContainer",
				"propertyName": "items",
				"values": {
					"wrapClass": ["search-template-container"],
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": [],
					"domAttributes": {"bindTo": "getSearchTemplateStyle"}
				}
			},
			{
				"operation": "insert",
				"name": "SearchTemplateName",
				"parentName": "SearchTemplate",
				"propertyName": "items",
				"values": {
					"labelConfig": {
						"visible": false
					},
					"itemType": BPMSoft.ViewItemType.TEXT,
					"markerValue": "SearchTemplateLabel",
					"placeholder": {
						"bindTo": "Resources.Strings.SearchPlaceholder"
					},
					"controlConfig": {
						"className": "BPMSoft.TextEdit",
						"focused": {"bindTo": "IsSearchTemplateFocused"},
						"value": {"bindTo": "SearchTemplateName"},
						"markerValue": "SearchInput",
						"rightIconClasses": ["base-edit-clear-icon"],
						"rightIconClick": {
							"bindTo": "onSearchClearTemplateButtonClick"
						},
						"enterkeypressed": {
							"bindTo": "onSearchButtonClick"
						}
					},
					"wrapClass": ["search-template-edit"]
				}
			},
			{
				"operation": "insert",
				"name": "SearchTemplateButton",
				"parentName": "SearchTemplate",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"imageConfig": "$Resources.Images.SearchIcon",
					"style": BPMSoft.controls.ButtonEnums.style.TRANSPARENT,
					"click":"$onSearchButtonClick",
					"classes": {
						"wrapperClass": ["search-template-button"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "ContentBuilderPreviewContainer",
				"parentName": "LeftControlGroup",
				"propertyName": "items",
				"values": {
					"idProperty": "Id",
					"collection": {"bindTo": "PreviewItems"},
					"generator": "ContainerListGenerator.generatePartial",
					"maskVisible": {"bindTo": "IsPreviewItemsLoading"},
					"itemType": BPMSoft.ViewItemType.GRID,
					"classes": {"wrapClassName": ["content-preview-block-container"]},
					"itemConfig": [{
						"itemType": BPMSoft.ViewItemType.CONTAINER,
						"name": "ContentPreviewBlock",
						"className": "BPMSoft.ContentPreviewBlock",
						"dragOver": {"bindTo": "onDragOver"},
						"dragDrop": {"bindTo": "onDragDrop"},
						"invalidDrop": {"bindTo": "onInvalidDrop"},
						"caption": {"bindTo": "Caption"},
						"tag": {"bindTo": "Tag"},
						"imageConfig": {"bindTo": "ImageConfig"},
						"draggableGroupName": ["ContentBlank"],
						"visible": {"bindTo": "Visible"}
					}]
				}
			},
			{
				"operation": "insert",
				"name": "RightContainer",
				"parentName": "MainContainer",
				"propertyName": "items",
				"index": 1,
				"values": {
					"classes": {"wrapClassName": ["right-container"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "HeaderContainer",
				"parentName": "RightContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"classes": {"wrapClassName": ["header-container"]},
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "FooterContainerWrap",
				"parentName": "RightContainer",
				"propertyName": "items",
				"values": {
					"id": "ContentBuilderSheetContainer",
					"classes": {"wrapClassName": ["footer-container-wrap"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"afterrender": "$onSheetContainerAfterRender",
					"afterrerender": "$onSheetContainerAfterReRender",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "FooterContainer",
				"parentName": "FooterContainerWrap",
				"propertyName": "items",
				"values": {
					"classes": {"wrapClassName": ["footer-container"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "Caption",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"index": 0,
				"values": {
					"itemType": BPMSoft.ViewItemType.LABEL,
					"classes": {
						"wrapClassName": ["caption-label"],
						"labelClass": ["content-builder-caption-label"]
					},
					"caption": "$Caption"
				}
			},
			{
				"operation": "insert",
				"name": "LeftButtonContainer",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"values": {
					"classes": {"wrapClassName": ["left-button-container"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SaveButton",
				"parentName": "LeftButtonContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"caption": "$Resources.Strings.SaveButtonCaption",
					"classes": {
						"textClass": "actions-button-margin-right"
					},
					"click": "$save",
					"style": BPMSoft.controls.ButtonEnums.style.ORANGE,
					"enabled": "$_isSuccessState"
				}
			},
			{
				"operation": "insert",
				"name": "CancelButton",
				"parentName": "LeftButtonContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"caption": "$Resources.Strings.CancelButtonCaption",
					"classes": {
						"textClass": "actions-button-margin-right"
					},
					"click": "$cancel",
					"visible": "$_isSuccessState"
				}
			},
			{
				"operation": "insert",
				"name": "PreviewButton",
				"parentName": "LeftButtonContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"caption": "$Resources.Strings.PreviewButtonCaption",
					"classes": {"textClass": "actions-button-margin-right"},
					"click": "$openPreviewModule",
					"enabled": {
						bindTo: "Items",
						bindConfig: { converter: "isNotEmptyValue" }
					}
				}
			},
			{
				"operation": "insert",
				"name": "EndButtonContainer",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"classes": {"wrapClassName": ["end-button-container"]},
					"visible": "$isMjmlConfig",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SheetSelectButton",
				"parentName": "EndButtonContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"imageConfig": "$Resources.Images.SettingsButtonIcon",
					"style": BPMSoft.controls.ButtonEnums.style.TRANSPARENT,
					"click": "$onContentSheetSelectedClick",
					"classes": {
						"wrapperClass": ["settings-button-control"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "RightButtonContainer",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"classes": {"wrapClassName": ["right-button-container"]},
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SettingsContainer",
				"parentName": "RightButtonContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"wrapClass": ["content-builder-settings-container"],
					"visible": "$isGridConfig",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "AlignContainer",
				"parentName": "SettingsContainer",
				"propertyName": "items",
				"index": 0,
				"values": {
					"markerValue": "AlignContainer",
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"wrapClass": ["content-builder-align-container"],
					"visible": "$ContentSheetSelected",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SheetPositionLabel",
				"parentName": "AlignContainer",
				"propertyName": "items",
				"index": 0,
				"values": {
					"id": "SheetAlignLabel",
					"itemType": BPMSoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.SheetPositionCaption",
					"labelConfig": {
						"classes": ["sheet-position-label"]
					},
					"visible": true
				}
			},
			{
				"operation": "insert",
				"name": "SheetAlign",
				"parentName": "AlignContainer",
				"propertyName": "items",
				"values": {
					"value": {"bindTo": "SheetAlign"},
					"itemType": BPMSoft.ViewItemType.RADIO_GROUP,
					"wrapClass": ["sheet-position-control-group-container"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "LeftAlign",
				"parentName": "SheetAlign",
				"propertyName": "items",
				"values": {
					"labelConfig": {"visible": false},
					"markerValue": "Left",
					"value": BPMSoft.Align.LEFT,
					"classes": {
						"wrapClass": ["sheet-align sheet-align-left"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "CenterAlign",
				"parentName": "SheetAlign",
				"propertyName": "items",
				"values": {
					"labelConfig": {"visible": false},
					"markerValue": "Center",
					"value": BPMSoft.Align.CENTER,
					"classes": {
						"wrapClass": ["sheet-align sheet-align-center"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "RightAlign",
				"parentName": "SheetAlign",
				"propertyName": "items",
				"values": {
					"labelConfig": {"visible": false},
					"markerValue": "Right",
					"value": BPMSoft.Align.RIGHT,
					"classes": {
						"wrapClass": ["sheet-align sheet-align-right"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "ContentSheetWidthContainer",
				"parentName": "SettingsContainer",
				"propertyName": "items",
				"index": 1,
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"wrapClass": ["content-sheet-width-container"],
					"items": [],
					"visible": "$ContentSheetSelected"
				}
			},
			{
				"operation": "insert",
				"name": "ContentSheetWidthLabel",
				"parentName": "ContentSheetWidthContainer",
				"propertyName": "items",
				"values": {
					"id": "ContentSheetWidthLabel",
					"itemType": BPMSoft.ViewItemType.LABEL,
					"caption": {"bindTo": "Resources.Strings.SheetWidthCaption"},
					"labelConfig": {
						"classes": ["content-sheet-width-label"]
					},
					"visible": "$ContentSheetSelected"
				}
			},
			{
				"operation": "insert",
				"name": "ContentSheetWidth",
				"parentName": "ContentSheetWidthContainer",
				"propertyName": "items",
				"values": {
					"labelConfig": {"visible": false},
					"visible": "$ContentSheetSelected",
					"wrapClass": ["content-settings-width-wrap"]
				}
			},
			{
				"operation": "insert",
				"name": "PxLabel",
				"parentName": "ContentSheetWidthContainer",
				"propertyName": "items",
				"values": {
					"id": "pxLabel",
					"itemType": BPMSoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.PxLabelCaption",
					"labelConfig": {
						"classes": ["pxLabel"]
					},
					"visible": {"bindTo": "ContentSheetSelected"}
				}
			},
			{
				"operation": "insert",
				"name": "SettingsColorButton",
				"parentName": "SettingsContainer",
				"propertyName": "items",
				"index": 2,
				"values": {
					"itemType": BPMSoft.ViewItemType.COLOR_BUTTON,
					"value": "$BackgroundColor",
					"visible": "$ContentSheetSelected",
					"classes": {
						"wrapClasses": ["settings-color-button"]
					},
					"menuItemClassName": BPMSoft.MenuItemType.COLOR_PICKER
				}
			},
			{
				"operation": "insert",
				"name": "SheetSettingsButton",
				"parentName": "SettingsContainer",
				"propertyName": "items",
				"index": 3,
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"imageConfig": {"bindTo": "Resources.Images.SettingsButtonIcon"},
					"style": BPMSoft.controls.ButtonEnums.style.TRANSPARENT,
					"click": "$onContentSheetSettingButtonClick",
					"classes": {
						"wrapperClass": ["settings-button-control"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "SheetContainer",
				"parentName": "FooterContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"className": "BPMSoft.ContentSheet",
					"classes": {
						"wrapClass": ["sheet-container"]
					},
					"maskVisible": {"bindTo": "IsSheetContainerLoading"},
					"viewModelItems": {"bindTo": "Items"},
					"reorderableIndex": {"bindTo": "ReorderableIndex"},
					"placeholder": {"bindTo": "Resources.Strings.ContentSheetPlaceholder"},
					"width": {"bindTo": "Width"},
					"backgroundColor": {"bindTo": "BackgroundColor"},
					"selected": {"bindTo": "ContentSheetSelected"},
					"groupName": ["ContentBlank"],
					"sheetAlign": {"bindTo": "SheetAlign"},
					"isFullWidth": "$isHtmlState",
					"tools": []
				}
			},
			{
				"operation": "insert",
				"name": "RightPanelContainerWrap",
				"parentName": "MainContainer",
				"propertyName": "items",
				"index": 2,
				"values": {
					"classes": {
						"wrapClassName": ["right-panel-container-wrap"]
					},
					"id": "ContentPropertiesRightPanel",
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "RightPanelContainer",
				"parentName": "RightPanelContainerWrap",
				"propertyName": "items",
				"values": {
					"classes": {
						"wrapClassName": ["right-panel-container"]
					},
					"visible": "$isRightPanelEnabled",
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": [],
					"markerValue": "ContentPropertiesPanel"
				}
			},
			{
				"operation": "insert",
				"name": "ContentItemPanelModule",
				"parentName": "RightPanelContainer",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.MODULE,
					"classes": {
						"wrapClassName": "content-item-panel-wrapper"
					}
				}
			},
			{
				"operation": "insert",
				"parentName": "CardContentContainer",
				"propertyName": "items",
				"name": "ContentBlockDesignerContainer",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"visible": "$IsContentBlockDesignerVisible",
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "ContentBlockDesignerContainer",
				"propertyName": "items",
				"name": "ContentBlockDesignerMask",
				"values": {
					"generateId": false,
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"classes": {"wrapClassName": ["content-block-designer-mask"]},
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "ContentBlockDesignerContainer",
				"propertyName": "items",
				"name": "ContentBlockDesigner",
				"values": {
					"itemType": BPMSoft.ViewItemType.MODULE,
					"classes": {"wrapClassName": "content-block-designer-container"}
				}
			},
			{
				"operation": "insert",
				"propertyName": "items",
				"name": "PreviewContentBuilderMask",
				"values": {
					"generateId": false,
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"classes": {"wrapClassName": ["preview-builder-container-mask"]},
					"visible": "$IsPreviewVisible",
					"items": []
				}
			},
			{
				"operation": "insert",
				"propertyName": "items",
				"name": "PreviewContentBuilder",
				"values": {
					"itemType": BPMSoft.ViewItemType.MODULE,
					"classes": {"wrapClassName": ["preview-builder-container"]},
					"visible": "$IsPreviewVisible"
				}
			},
			{
				"operation": "insert",
				"name": "LeftContainer",
				"propertyName": "items",
				"index": -1,
				"values": {
					"classes": {"wrapClassName": ["left-container"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"visible": "$isMjmlState",
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "LeftContainerContentWrap",
				"parentName": "LeftContainer",
				"propertyName": "items",
				"values": {
					"classes": {"wrapClassName": ["left-container-content-wrap", "scrollable-container"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "LeftContainerContent",
				"parentName": "LeftContainerContentWrap",
				"propertyName": "items",
				"values": {
					"classes": {"wrapClassName": ["left-container-content"]},
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "GridElementsContainer",
				"parentName": "LeftContainerContent",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"className": "BPMSoft.ContainerList",
					"generator": "ContainerListGenerator.generatePartial",
					"collection": "$GridElementsCollection",
					"itemPrefix": "GridElement",
					"getCustomItemConfig": function(item) {
						return {
							"className": "BPMSoft.Container",
							"classes": {
								"wrapClassName": ["elements-container-list-item"]
							},
							"items": [
								{
									"className": item.$ClassName,
									"markerValue": "$ItemType",
									"groupName": "$GroupName",
									"caption": "$Caption",
									"imageConfig": "$Icon",
									"ondragenter": "$onDragEnter",
									"ondragover": "$onDragOver",
									"ondragout": "$onDragOut",
									"ondragdrop": "$onDragDrop",
									"oninvaliddrop": "$onInvalidDrop"
								}
							]
						};
					},
					"classes": { "wrapClassName": ["elements-container-list"] }
				},
				"items": []
			},
			{
				"operation": "insert",
				"name": "FilterUserBlocksContainerWrap",
				"parentName": "LeftContainerContent",
				"propertyName": "items",
				"values": {
					"wrapClass": ["filter-container-wrap"],
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "FilterUserBlocksContainer",
				"parentName": "FilterUserBlocksContainerWrap",
				"propertyName": "items",
				"values": {
					"wrapClass": ["filter-container"],
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "SearchUserBlockTemplate",
				"parentName": "FilterUserBlocksContainer",
				"propertyName": "items",
				"values": {
					"wrapClass": ["search-template-container"],
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"items": [],
					"domAttributes": {"bindTo": "getSearchTemplateStyle"}
				}
			},
			{
				"operation": "insert",
				"name": "SearchTemplateName",
				"parentName": "SearchUserBlockTemplate",
				"propertyName": "items",
				"values": {
					"labelConfig": {
						"visible": false
					},
					"itemType": BPMSoft.ViewItemType.TEXT,
					"markerValue": "SearchUserBlockTemplateLabel",
					"placeholder": {
						"bindTo": "Resources.Strings.SearchUserBlockPlaceholder"
					},
					"controlConfig": {
						"className": "BPMSoft.TextEdit",
						"focused": {"bindTo": "IsSearchTemplateFocused"},
						"value": {"bindTo": "SearchTemplateName"},
						"markerValue": "SearchInput",
						"rightIconClasses": ["base-edit-clear-icon"],
						"rightIconClick": {
							"bindTo": "onSearchUserBlockClearButtonClick"
						},
						"enterkeypressed": {
							"bindTo": "onSearchUserBlockButtonClick"
						}
					},
					"wrapClass": ["search-template-edit"]
				}
			},
			{
				"operation": "insert",
				"name": "SearchUserBlockTemplateButton",
				"parentName": "SearchUserBlockTemplate",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.BUTTON,
					"imageConfig": "$Resources.Images.SearchUserBlockIcon",
					"click":"$onSearchUserBlockButtonClick",
					"classes": {
						"wrapperClass": ["search-template-button"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "UserBlocksContainer",
				"parentName": "LeftContainerContent",
				"propertyName": "items",
				"values": {
					"itemType": BPMSoft.ViewItemType.CONTAINER,
					"className": "BPMSoft.ContainerList",
					"generator": "ContainerListGenerator.generatePartial",
					"maskVisible": {"bindTo": "IsUserBlocksLoading"},
					"collection": "$UserBlocksCollection",
					"itemPrefix": "UserBlock",
					"getCustomItemConfig": function(item) {
						return {
							"className": "BPMSoft.Container",
							"classes": {
								"wrapClassName": ["user-block-container-list-item"]
							},
							"items": [
								{
									"className": item.$ClassName,
									"groupName": "$GroupName",
									"caption": "$Caption",
									"imageConfig": "$Icon",
									"ondragenter": "$onDragEnter",
									"ondragover": "$onDragOver",
									"ondragout": "$onDragOut",
									"ondragdrop": "$onDragDrop",
									"oninvaliddrop": "$onInvalidDrop",
									"deleteiconclick": "$onUserBlockDeleteIconClick",
									"visible": "$Visible"
								}
							]
						};
					},
					"classes": { "wrapClassName": ["user-blocks-container-list"] }
				},
				"items": [
				]
			}
		]
	};
});
