namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecastColumnSettingModelsSchema

	/// <exclude/>
	public class ForecastColumnSettingModelsSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastColumnSettingModelsSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastColumnSettingModelsSchema(ForecastColumnSettingModelsSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("caf2a486-8320-4af0-9da3-4fa7ddc482cf");
			Name = "ForecastColumnSettingModels";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,173,87,203,110,219,48,16,188,7,200,63,44,210,75,123,177,129,30,227,32,135,60,236,186,64,91,35,70,114,9,122,160,197,149,195,130,34,93,62,82,24,65,254,189,75,137,182,101,199,79,74,58,25,212,204,238,236,44,87,88,43,86,160,157,177,12,225,102,244,99,172,115,215,185,213,42,23,83,111,152,19,90,117,250,218,96,198,172,123,250,122,126,246,118,126,6,244,120,43,212,20,198,115,235,176,232,125,60,162,0,82,98,22,216,182,51,64,133,70,100,107,176,159,248,207,209,187,144,235,187,213,138,222,85,111,63,25,156,18,9,110,37,179,246,18,110,152,69,10,229,11,53,70,231,136,184,192,117,187,93,184,178,190,40,152,153,95,175,142,2,30,178,192,133,92,27,96,82,66,86,210,193,86,252,78,141,222,93,231,207,252,68,138,44,178,183,36,14,152,88,253,14,5,139,227,59,204,133,66,11,175,194,138,137,144,194,205,65,231,144,27,86,26,194,36,204,152,113,225,40,106,123,101,210,99,84,182,75,93,120,158,131,85,35,163,103,104,220,252,243,133,176,253,101,200,17,69,252,38,56,71,117,241,229,247,138,17,107,154,104,45,97,184,21,14,111,48,69,215,11,254,244,224,189,98,190,47,187,129,138,87,13,217,209,159,83,122,243,128,51,131,22,149,179,27,61,177,135,155,18,12,19,100,92,213,156,181,172,151,205,122,245,168,196,95,143,32,200,10,39,114,129,166,236,11,147,153,151,204,33,135,112,236,230,167,55,199,106,111,50,124,28,242,109,253,24,120,193,97,188,64,108,182,32,93,183,193,28,13,42,26,228,202,225,211,101,83,132,202,202,61,194,31,86,152,36,233,3,164,43,64,211,73,36,11,238,5,63,200,166,118,187,151,6,218,71,68,223,166,222,58,19,190,61,15,117,92,123,230,147,10,161,121,178,243,21,253,160,249,163,53,88,146,250,178,236,118,5,31,112,188,46,58,217,244,190,144,142,156,230,204,49,248,67,74,98,240,211,133,231,101,160,61,114,171,76,119,33,81,107,183,163,246,73,201,189,42,63,195,201,206,135,0,7,47,74,191,6,106,103,76,55,116,39,78,233,74,252,129,75,179,42,32,249,202,220,70,211,131,232,154,122,142,169,178,57,30,20,204,177,29,183,41,111,70,23,8,130,128,170,130,242,151,226,73,147,26,66,253,170,248,251,231,180,6,108,182,26,208,210,88,144,247,199,237,6,17,124,234,150,182,158,163,225,38,240,241,190,71,81,137,235,89,73,219,102,246,240,94,249,130,28,158,72,188,138,21,12,105,103,190,134,167,192,104,126,123,34,164,169,254,8,120,218,85,198,238,58,198,53,102,59,195,224,105,173,95,148,35,212,170,66,201,18,190,255,20,108,168,162,198,157,219,242,99,13,212,108,16,238,185,112,193,163,227,38,97,129,62,125,71,206,202,145,216,200,214,230,76,8,11,83,163,253,12,144,114,36,122,47,236,32,132,8,42,247,252,81,89,98,142,118,254,253,63,58,148,153,35,196,14,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("caf2a486-8320-4af0-9da3-4fa7ddc482cf"));
		}

		#endregion

	}

	#endregion

}

