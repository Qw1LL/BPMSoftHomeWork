namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecastColumnsMigrationSchema

	/// <exclude/>
	public class ForecastColumnsMigrationSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastColumnsMigrationSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastColumnsMigrationSchema(ForecastColumnsMigrationSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("6ee08079-d32e-4c13-8060-f6c336735fc6");
			Name = "ForecastColumnsMigration";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,189,87,75,111,219,56,16,62,171,64,255,3,235,94,228,194,208,161,199,54,241,34,246,198,129,23,77,219,173,210,94,138,30,24,105,108,107,33,81,94,146,114,225,6,249,239,59,36,135,18,101,217,238,54,192,238,197,2,135,243,248,230,77,11,94,129,218,242,12,216,236,227,109,90,175,116,50,175,197,170,88,55,146,235,162,22,201,162,150,144,113,165,191,188,126,254,236,225,249,179,168,81,133,88,179,247,240,93,215,66,25,246,63,84,45,222,182,23,233,94,105,168,14,207,168,179,44,33,51,10,85,114,3,2,100,145,13,120,222,21,226,239,142,216,161,169,170,208,64,71,151,112,156,154,92,11,93,232,2,20,94,35,195,75,9,107,180,203,230,37,87,234,13,243,254,32,162,166,18,234,182,88,59,71,45,239,182,185,47,139,140,41,141,164,140,101,70,226,140,64,100,226,209,234,191,5,189,169,115,180,240,81,22,59,174,193,42,140,182,238,224,85,162,178,170,41,249,18,253,101,31,182,32,102,18,35,31,143,153,213,20,73,208,141,20,76,192,247,30,163,187,140,238,246,91,96,151,225,141,161,36,168,70,114,145,79,28,211,156,111,13,56,228,27,197,35,162,125,225,101,3,33,229,209,4,46,122,252,41,194,121,89,43,200,255,75,140,227,1,198,241,175,97,252,250,141,205,154,162,204,211,207,183,41,148,43,186,137,251,73,99,153,253,28,113,1,197,9,249,9,135,78,121,180,104,132,45,103,130,31,250,132,80,188,87,157,91,1,241,145,190,65,254,39,79,194,224,156,27,34,112,222,38,239,177,179,15,113,208,213,50,79,238,234,84,75,108,157,214,184,135,213,75,250,211,114,209,84,87,101,25,164,194,124,83,208,218,116,170,114,95,229,147,177,227,146,237,8,157,191,75,44,92,107,52,42,86,44,166,251,75,38,154,178,244,130,39,42,241,235,183,7,7,215,224,37,253,170,169,42,46,247,62,8,70,226,93,161,244,69,32,54,117,70,48,166,141,208,88,236,175,216,235,177,83,179,194,82,226,217,134,197,97,102,10,251,35,28,242,22,145,193,106,110,18,155,176,23,167,50,214,242,71,33,176,228,42,207,173,52,217,141,162,172,198,65,38,124,32,200,159,161,204,255,88,185,30,218,0,67,80,203,39,121,66,223,6,151,189,170,35,46,231,48,165,185,39,113,87,95,73,201,247,241,248,76,97,222,215,117,201,150,138,220,119,145,255,87,115,129,122,196,4,107,153,155,170,59,191,24,145,170,180,74,122,118,156,236,207,192,165,155,186,41,115,183,80,160,3,120,174,91,124,48,124,163,164,189,202,118,13,114,198,236,174,46,114,220,79,117,6,74,165,27,0,191,212,98,171,252,179,2,137,222,8,183,168,89,211,59,78,152,93,171,251,52,219,64,197,41,72,238,48,97,203,107,209,84,56,226,239,75,184,232,135,120,74,156,106,108,76,60,12,58,106,152,13,211,86,94,38,108,172,23,135,185,164,228,141,217,65,159,156,8,97,55,253,110,188,223,196,162,252,32,160,243,148,234,138,236,30,75,83,155,151,129,117,154,55,65,215,25,203,109,194,48,198,75,65,89,163,78,251,237,216,212,108,13,16,211,155,163,107,142,66,224,155,234,120,85,28,194,9,128,226,232,240,49,48,207,56,228,53,31,76,250,14,164,78,82,124,166,241,178,248,1,31,238,255,194,34,232,48,5,26,192,22,69,27,91,87,16,201,28,19,172,193,21,76,220,175,35,47,236,4,147,5,232,108,179,144,117,245,251,44,110,151,211,1,15,66,116,97,183,14,197,35,15,121,52,57,116,224,80,144,239,32,94,241,82,65,56,81,168,53,94,130,200,221,211,141,206,131,119,156,125,12,82,31,245,30,134,182,123,63,53,162,125,11,198,103,91,39,92,117,202,6,232,150,11,190,6,137,97,235,115,38,97,143,17,211,219,86,150,186,226,19,108,107,218,98,253,6,50,23,170,208,181,60,17,243,78,7,53,49,150,70,104,41,89,20,34,95,226,52,227,34,131,217,222,188,31,226,81,223,196,40,80,165,204,0,121,130,38,59,120,6,138,254,108,64,238,201,173,48,10,150,30,247,180,79,66,211,246,153,19,40,43,114,154,38,151,129,94,179,98,168,115,71,203,124,96,91,245,153,113,62,56,4,221,191,150,227,1,181,227,193,105,72,174,4,174,163,49,163,1,173,165,31,8,116,141,206,95,227,204,139,237,145,93,78,253,100,219,121,12,55,13,142,102,130,97,16,152,21,66,152,109,217,95,24,134,105,236,221,11,221,238,148,208,56,111,219,209,214,74,55,239,148,51,111,52,121,209,99,203,224,112,240,247,103,125,104,200,183,21,125,15,157,63,210,105,68,11,73,143,255,0,212,94,211,83,131,14,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("6ee08079-d32e-4c13-8060-f6c336735fc6"));
		}

		#endregion

	}

	#endregion

}

