namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForecastDataIteratorSchema

	/// <exclude/>
	public class ForecastDataIteratorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastDataIteratorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastDataIteratorSchema(ForecastDataIteratorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("21b3dfe6-f171-80f3-2d69-1b482f22f3f9");
			Name = "ForecastDataIterator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,213,87,75,111,219,56,16,62,187,64,255,195,32,123,145,81,195,201,238,49,141,28,164,105,147,26,72,218,32,193,246,82,20,5,35,81,22,17,137,212,146,148,3,163,240,127,223,225,203,122,88,118,140,116,47,123,177,77,114,56,243,113,190,121,153,147,146,170,138,36,20,62,220,221,62,136,76,79,47,5,207,216,162,150,68,51,193,167,87,66,210,132,40,253,237,175,183,111,126,189,125,51,170,21,227,11,120,88,41,77,203,247,189,53,94,45,10,154,152,123,106,122,77,57,149,44,217,146,185,97,252,159,102,179,49,90,150,130,15,237,75,58,188,59,189,34,137,22,146,81,133,231,40,241,135,164,11,52,12,115,174,169,204,240,65,167,48,15,224,63,18,77,230,184,77,240,130,21,62,62,62,134,51,85,151,37,145,171,153,95,7,97,72,81,26,152,23,159,6,233,227,150,120,85,63,22,44,1,22,76,237,178,52,50,30,219,50,102,55,156,16,85,160,115,41,234,69,14,164,40,64,138,103,5,34,3,85,209,132,101,140,166,144,121,189,6,198,54,14,183,83,17,73,74,224,72,100,124,164,114,74,245,209,108,243,22,187,158,158,29,91,153,225,43,246,55,69,56,234,104,118,183,249,221,185,179,20,44,13,136,239,17,99,244,96,212,58,229,19,24,122,187,85,164,160,209,61,54,44,174,29,83,148,167,142,172,14,113,151,5,81,234,116,143,182,23,153,107,95,105,153,222,71,97,98,140,238,181,105,56,52,62,8,48,239,164,168,168,212,24,119,167,112,103,149,184,243,65,150,175,106,110,211,1,89,38,26,42,41,18,170,20,146,30,104,181,140,239,224,214,35,188,176,10,206,230,159,120,93,34,178,199,130,158,93,215,44,157,205,192,48,17,208,94,113,248,5,11,170,223,131,50,31,235,223,193,180,192,128,172,126,11,217,181,209,240,74,120,23,165,168,185,54,89,96,179,65,11,120,164,45,148,8,153,128,102,37,221,143,13,83,211,248,231,210,234,234,152,134,24,254,60,57,113,53,163,31,138,175,141,207,87,214,148,7,106,170,101,203,243,86,202,62,155,240,212,139,183,74,4,67,9,182,100,41,214,133,199,149,19,78,242,154,63,13,71,248,247,143,52,35,117,161,63,48,158,98,241,140,244,170,162,34,139,6,75,213,120,252,227,144,156,128,157,53,181,159,37,87,140,22,169,201,16,201,150,248,6,119,88,185,69,163,227,51,195,251,50,201,87,72,149,209,119,79,43,161,24,42,92,193,79,227,134,102,61,204,87,195,13,118,28,45,107,211,16,122,105,233,223,52,132,58,250,91,81,137,55,185,107,89,80,119,150,99,176,197,123,212,19,138,123,98,166,172,249,184,217,137,174,83,50,164,208,120,147,166,193,37,126,9,237,52,218,248,229,129,106,141,220,33,226,114,6,155,221,161,92,106,20,185,218,236,62,247,10,246,94,214,91,14,92,61,232,125,219,190,63,132,238,3,68,28,29,8,202,255,26,73,170,107,201,251,145,2,231,231,16,245,247,98,151,189,110,100,88,225,108,162,207,14,64,53,139,156,161,17,167,207,237,16,187,144,11,164,138,235,232,168,27,11,71,147,158,19,199,99,219,246,108,128,224,39,250,18,221,186,141,109,73,138,154,90,47,191,24,74,183,84,231,98,103,98,185,62,141,214,101,187,89,31,212,159,39,176,85,199,205,41,190,18,117,204,83,133,48,121,93,20,33,43,30,133,40,32,39,234,22,117,27,189,120,156,145,66,217,89,13,241,116,47,118,150,72,143,113,231,13,83,218,153,137,188,143,76,201,22,89,102,156,20,195,73,179,151,216,26,30,183,27,122,168,236,141,80,30,72,188,161,75,90,244,108,78,173,112,176,131,44,154,89,18,227,65,127,51,142,71,97,183,53,253,84,86,122,229,132,82,17,162,108,73,164,43,201,241,1,65,106,34,171,125,234,39,165,73,147,187,19,251,250,59,178,160,198,209,110,214,14,166,70,155,142,21,187,87,79,154,125,245,53,184,198,249,40,28,125,238,63,188,235,137,45,49,219,149,211,158,131,130,212,124,193,241,137,247,108,145,99,87,138,1,195,157,134,163,155,150,187,54,174,115,103,107,239,88,235,42,115,102,108,132,119,216,49,162,227,255,145,39,249,93,220,21,246,167,221,160,234,169,243,126,241,162,109,10,173,29,3,242,171,244,125,47,26,159,79,237,169,151,102,25,68,91,234,78,66,64,135,114,226,133,215,29,242,93,24,91,19,174,103,71,248,27,226,153,217,154,222,211,68,200,116,158,142,91,118,230,202,64,177,12,68,93,66,198,141,193,110,64,183,102,165,243,233,156,47,197,19,141,156,233,160,120,13,20,51,108,232,250,192,188,181,67,199,200,204,26,36,201,33,50,185,103,240,227,168,228,159,216,32,27,109,213,144,118,161,232,165,22,79,136,142,48,168,191,255,192,226,102,20,174,67,213,219,184,209,125,173,225,57,103,5,133,168,69,177,147,92,119,203,152,45,46,109,23,110,103,120,192,234,123,64,63,253,227,38,225,58,193,119,112,117,125,105,176,255,95,253,125,243,125,248,191,248,23,7,206,237,14,215,101,78,147,167,208,12,191,96,119,136,12,36,156,49,237,113,136,130,86,156,238,188,208,178,224,111,57,108,88,154,205,183,219,106,230,31,191,221,169,182,102,70,82,161,198,236,137,223,125,129,48,52,255,227,222,191,82,198,5,237,36,17,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("21b3dfe6-f171-80f3-2d69-1b482f22f3f9"));
		}

		#endregion

	}

	#endregion

}

