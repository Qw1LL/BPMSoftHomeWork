namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: MLClassificationBatchPredictorSchema

	/// <exclude/>
	public class MLClassificationBatchPredictorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public MLClassificationBatchPredictorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public MLClassificationBatchPredictorSchema(MLClassificationBatchPredictorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("3edb9944-5ae6-40f3-ac06-d63d06924a25");
			Name = "MLClassificationBatchPredictor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("73704ec6-562c-4400-8a4a-17477a18625f");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,157,86,223,111,219,54,16,126,86,129,254,15,55,53,15,10,98,200,197,30,19,219,192,146,38,133,49,187,13,150,116,47,195,80,208,210,201,230,42,137,6,73,57,245,12,255,239,59,146,250,97,202,142,187,237,197,22,143,119,199,239,238,190,59,178,100,5,170,53,75,16,110,31,231,79,34,211,241,157,40,51,190,172,36,211,92,148,241,124,246,246,205,238,237,155,160,82,188,92,194,211,86,105,44,110,122,107,50,201,115,76,140,190,138,63,98,137,146,39,157,206,157,144,216,173,150,185,88,176,252,250,250,78,20,5,185,159,137,229,146,196,221,126,135,194,236,159,146,75,140,31,88,162,133,228,168,142,247,231,179,120,90,106,148,25,133,100,182,73,225,157,196,37,65,131,187,156,41,117,13,243,153,253,224,25,79,108,136,183,76,39,171,71,137,41,55,78,173,197,112,56,132,145,170,138,130,201,237,164,94,55,70,168,0,75,205,181,249,112,71,175,157,45,223,32,20,44,89,241,18,33,71,38,75,179,87,136,20,243,184,113,57,60,240,249,199,7,204,88,149,235,91,94,166,164,25,233,237,26,69,22,77,231,51,31,208,229,0,62,81,141,96,108,128,83,130,181,138,125,252,143,82,44,114,44,158,201,254,242,79,114,188,174,22,57,79,32,49,74,63,8,22,76,54,124,209,104,198,149,30,249,70,191,161,34,160,19,131,154,168,64,191,109,74,31,56,230,41,229,244,81,242,13,211,232,54,215,110,1,18,89,42,202,124,11,83,170,50,124,205,233,103,12,244,57,103,37,91,162,36,166,104,83,126,148,81,56,159,133,151,174,88,193,59,44,83,231,221,63,202,198,46,43,131,209,28,104,131,116,26,253,106,89,193,180,164,18,177,156,255,77,101,98,80,226,11,112,178,103,37,17,93,100,160,87,72,38,136,144,72,204,198,225,249,44,133,195,137,203,166,169,227,113,33,157,100,205,36,43,160,164,74,141,195,74,161,36,184,165,107,137,112,242,76,167,25,25,36,173,48,30,13,173,133,117,80,87,236,60,138,232,139,231,213,58,236,150,151,84,202,5,83,24,245,197,166,119,131,253,249,212,206,81,175,132,43,163,208,100,136,233,153,196,62,177,13,165,212,36,176,225,61,121,144,150,33,255,54,63,182,41,220,152,113,201,177,2,147,29,146,120,153,57,50,181,173,183,157,166,206,206,173,128,167,230,131,90,83,158,55,222,176,188,194,112,242,216,199,13,118,195,47,73,147,9,16,27,148,146,78,128,141,224,169,141,190,179,119,141,17,205,103,243,46,34,23,140,251,30,192,199,138,140,26,208,3,227,57,8,94,239,48,7,164,46,90,208,157,99,78,149,177,127,118,116,112,78,76,190,15,207,141,45,158,105,77,248,47,102,183,197,80,159,113,243,159,120,241,163,110,59,34,5,37,46,101,154,129,22,237,180,252,95,236,152,159,28,168,53,85,154,59,234,108,209,91,64,31,8,79,56,249,224,178,71,167,195,203,10,37,194,55,36,2,169,99,42,1,43,83,151,43,179,221,122,105,206,168,153,147,209,16,213,43,166,107,251,83,109,253,42,129,28,164,115,236,233,192,142,12,145,6,32,22,127,17,43,39,29,28,227,161,225,203,134,29,78,152,95,164,25,183,102,240,29,76,78,18,86,5,65,141,250,51,106,0,95,123,147,227,166,245,153,241,156,46,84,114,102,57,235,238,222,173,153,222,35,115,121,168,46,156,223,77,182,30,172,246,36,242,144,212,222,238,191,39,184,182,141,71,158,116,183,34,156,85,158,59,29,94,82,50,155,29,117,39,42,90,143,225,189,219,36,167,74,211,36,215,116,211,126,191,63,210,250,185,86,243,210,19,63,8,121,79,52,138,190,109,188,196,195,120,82,39,46,240,186,148,252,244,52,227,95,113,235,28,7,154,120,83,27,217,220,56,163,86,219,245,177,34,23,209,235,93,126,217,119,111,243,118,115,224,181,197,111,119,84,93,199,3,54,120,156,25,192,153,59,187,69,27,236,124,110,189,130,156,70,130,213,222,55,120,78,77,161,123,223,214,161,244,6,82,103,229,116,159,146,21,22,204,27,68,13,174,94,176,131,154,111,241,231,242,9,117,181,246,79,169,137,20,236,129,194,76,86,16,117,36,106,231,102,16,244,248,115,117,213,4,195,51,136,250,228,26,141,79,144,169,243,21,152,135,75,124,47,37,93,193,141,40,184,8,237,229,236,158,5,109,206,65,177,141,153,81,212,239,52,22,204,104,144,152,8,153,194,174,9,122,111,30,31,110,132,237,252,249,189,167,22,108,163,51,131,217,254,247,219,164,97,137,219,223,215,250,167,162,154,192,251,54,134,131,8,46,194,103,59,245,94,204,207,174,103,180,63,104,60,154,142,60,199,38,162,197,169,104,221,8,84,16,194,85,13,247,34,52,65,159,142,47,134,207,230,45,152,113,73,29,188,59,206,248,222,97,162,199,35,61,223,83,211,227,194,94,40,132,221,190,13,219,168,77,180,126,94,126,114,243,163,141,87,175,164,120,241,71,204,129,131,211,151,158,147,250,66,146,193,63,136,147,193,60,32,13,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("3edb9944-5ae6-40f3-ac06-d63d06924a25"));
		}

		#endregion

	}

	#endregion

}

