namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: TermCalculationServiceSchema

	/// <exclude/>
	public class TermCalculationServiceSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public TermCalculationServiceSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public TermCalculationServiceSchema(TermCalculationServiceSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("8a10a692-749d-4236-a578-c1816f7dfa6e");
			Name = "TermCalculationService";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e9cdff4a-a92d-4d26-906f-df90167f5485");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,221,88,75,111,219,56,16,62,59,64,254,3,215,185,200,64,160,220,219,38,128,227,69,3,47,154,173,97,123,81,96,131,61,208,210,216,209,86,18,181,36,149,133,183,200,127,239,12,31,22,105,91,113,210,219,54,135,68,28,14,191,121,127,18,211,170,162,222,176,197,86,105,168,222,159,159,181,193,50,189,43,197,138,151,197,127,92,23,162,222,223,156,183,181,46,42,72,23,32,139,94,37,220,124,42,50,184,23,57,148,47,237,165,227,76,23,79,39,33,210,47,176,218,223,15,69,183,179,251,133,88,235,116,34,36,28,21,166,31,121,166,133,44,64,29,217,174,215,197,166,149,177,19,126,23,173,160,70,85,153,173,243,179,154,87,160,26,158,193,241,227,233,18,100,53,225,101,214,150,102,237,98,56,63,251,118,126,54,184,144,176,65,25,155,148,92,169,119,172,79,117,112,117,117,197,62,168,182,170,184,220,222,184,245,5,253,216,223,230,175,127,140,31,216,161,220,227,93,5,128,15,206,22,186,174,37,230,229,47,146,141,85,243,59,104,12,181,65,119,86,69,89,232,237,28,254,105,11,9,21,212,90,37,225,130,106,194,174,217,137,35,164,149,58,65,62,34,35,77,187,42,139,140,101,148,128,158,248,223,177,91,174,160,75,6,37,110,151,185,123,208,143,34,199,220,205,12,16,109,237,39,203,8,38,2,123,84,49,9,24,28,157,163,126,101,188,206,25,103,74,148,109,39,211,130,13,157,173,41,246,212,240,114,183,156,225,81,90,206,100,129,109,163,183,195,52,221,153,11,115,105,37,13,151,188,98,212,28,215,67,137,17,131,210,195,155,185,125,96,107,33,153,202,30,33,111,75,200,89,14,60,47,139,26,84,250,225,202,28,235,80,36,232,86,214,234,102,92,51,177,250,27,50,205,244,35,215,44,195,50,241,162,86,184,130,35,49,69,17,33,168,71,33,216,135,207,13,216,206,12,107,61,120,192,174,158,214,79,226,43,36,54,165,88,204,225,236,243,98,137,17,223,138,124,187,208,219,146,10,140,106,247,160,20,223,192,78,154,126,145,188,105,32,191,100,46,188,143,66,86,232,100,168,108,69,233,111,74,212,151,100,110,48,199,153,17,181,130,151,117,77,139,248,30,113,101,160,38,241,167,217,29,232,64,156,68,42,54,213,46,247,35,102,218,102,240,196,37,107,21,72,12,190,198,116,82,146,174,217,31,145,224,253,78,81,7,253,136,21,187,182,115,106,121,99,155,162,237,15,97,199,10,57,93,78,63,57,23,110,18,131,50,24,212,240,47,54,95,173,180,108,233,216,88,110,90,26,133,100,24,123,129,105,142,5,163,203,83,0,170,107,203,105,142,231,93,164,158,37,173,252,213,48,212,236,199,96,172,252,52,76,227,166,34,194,240,163,130,0,246,252,200,38,247,87,174,97,73,221,74,83,140,88,166,31,141,224,154,249,189,116,198,165,130,196,67,205,247,52,15,145,236,20,56,148,184,116,169,127,36,188,24,231,146,89,207,246,184,199,196,200,145,50,208,112,7,60,193,193,170,106,101,9,126,223,3,63,117,63,232,65,175,3,139,0,247,152,3,118,186,25,85,230,216,136,216,190,199,129,139,242,19,166,203,213,54,180,131,26,97,56,70,225,217,152,123,166,95,167,104,214,210,82,133,20,69,47,78,195,75,43,64,210,3,179,211,148,28,187,28,121,15,179,241,102,10,29,251,230,50,36,218,25,202,65,50,177,246,140,215,67,163,174,83,188,99,244,217,82,26,12,205,229,6,180,245,232,103,225,203,82,96,136,72,82,115,19,175,90,22,217,87,122,103,119,139,23,40,210,230,200,104,161,45,106,45,66,75,92,199,189,137,68,51,94,66,157,115,137,150,177,74,17,157,30,255,96,154,244,28,8,216,53,157,96,255,106,152,154,17,65,142,234,118,146,216,175,142,138,38,248,13,129,52,100,253,42,214,73,175,91,191,96,188,109,89,250,108,132,243,221,202,12,118,203,94,166,90,68,122,206,226,224,224,52,253,249,83,212,24,196,90,80,6,158,64,106,146,37,177,230,254,123,33,157,180,82,34,227,82,186,83,143,225,73,108,224,62,132,35,236,79,2,99,245,110,196,133,77,168,170,163,190,84,208,27,206,202,8,111,209,240,250,192,55,31,243,20,155,201,19,198,40,53,240,214,224,115,72,81,129,241,183,113,73,200,24,123,115,191,35,24,26,126,148,102,54,61,63,70,46,75,3,219,209,11,183,22,249,26,201,156,53,28,43,209,207,45,179,144,213,126,22,14,217,245,43,182,2,61,143,41,19,51,74,196,107,153,228,213,60,145,71,240,168,248,66,223,163,55,110,233,29,12,169,233,255,206,56,7,153,120,105,64,253,91,123,175,58,221,103,83,87,165,158,113,61,50,168,177,7,221,172,94,160,27,246,226,133,43,146,68,130,195,11,237,225,247,184,189,124,30,222,102,205,1,223,204,225,221,8,61,81,52,199,7,99,220,216,14,197,105,212,248,79,7,119,131,60,106,48,186,48,206,164,192,97,212,120,237,15,239,140,189,36,228,0,209,76,166,123,232,228,1,83,207,239,161,90,129,12,71,231,174,45,114,127,220,126,139,179,111,150,166,241,75,195,230,92,185,135,29,15,158,202,47,42,126,7,248,117,36,144,165,17,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("8a10a692-749d-4236-a578-c1816f7dfa6e"));
		}

		#endregion

	}

	#endregion

}

