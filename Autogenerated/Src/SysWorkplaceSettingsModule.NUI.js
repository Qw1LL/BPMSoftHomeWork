define("SysWorkplaceSettingsModule", ["ext-base", "BPMSoft", "SysWorkplace", "SysWorkplaceSettingsModuleResources",
	"LocalizableHelper", "GridUtilities", "css!CardModule", "css!DetailModule", "css!SysWorkplaceHelper"],
	function(Ext, BPMSoft, SysWorkplace, resources, LocalizableHelper, GridUtilities) {

	var viewConfig;
	var viewModel;

	var getViewModelConfig = function() {
		var config = {
			values: {
				id: null,
				name: null,
				modules: null,
				roles: null
			},
			methods: {
				load: function() {

				},
				saveWorkplace: function() {

				},
				addModule: function() {

				},
				addRole: function() {

				},
				changePosition: function() {

				}
			}
		};
		return config;
	};

	var getViewModel = function() {
		if (!viewModel) {
			var viewModelConfig = getViewModelConfig();
			viewModel = Ext.create("BPMSoft.BaseViewModel", viewModelConfig);
		}
		return viewModel;
	};

	var getContainerWrapper = function(containerId, containerItems, config) {
		var containerConfig =  {
			id: containerId,
			className: "BPMSoft.Container",
			selectors: {
				wrapEl: "#" + containerId
			},
			items: containerItems
		};
		if (config) {
			if (config.styles) {
				containerConfig.styles = {
					wrapStyles: config.styles
				};
			} else if (!Ext.isEmpty(config.wrapClass)) {
				containerConfig.classes = {
					wrapClassName: config.wrapClass
				};
			}
		}
		return containerConfig;
	};

	var getViewConfig = function() {
		var stringHelper = LocalizableHelper.localizableStrings;
		var config = getContainerWrapper("mainContainer", [
			getContainerWrapper("header", {
					className: "BPMSoft.Label",
					id: "header-name",
					caption: resources.localizableStrings.Header
				}, {
					wrapClass: ['header']
				}),
				getContainerWrapper("utils", [
					getContainerWrapper("utils-left", [
						{
							className: "BPMSoft.Button",
							caption: stringHelper.Save,
							style: BPMSoft.controls.ButtonEnums.style.ORANGE
						},
						{
							className: "BPMSoft.Button",
							caption: stringHelper.Cancel
						}
					])
				]),
				getContainerWrapper("autoGeneratedLeftContainer", [
					getContainerWrapper("nameContainer", [
						{
							className: "BPMSoft.Label",
							classes: {
								labelClass: ["t-label", "controlCaption", "required-caption"]
							},
							caption: SysWorkplace.columns.get("Name").caption
						}, {
							className: "BPMSoft.TextEdit",
							value: {
								bindTo: "name"
							},
							isRequired: true
						}
					]),
					getContainerWrapper("modulesContainer",
						[getContainerWrapper("moduleHeaderContainer", [
							{
								className: "BPMSoft.Label",
								caption: stringHelper.Modules.toUpperCase(),
								classes: {
									labelClass: ["controlGroupLabel"]
								}
							},
							GridUtilities.getAddButtonConfig(
								{
									caption: stringHelper.Add,
									id: "addModulesButton"
								}
							)
							],
							{
								wrapClass: ['headerContainer']
							}),
							{
								className: "BPMSoft.Grid",
								type: 'tiled',
								watchRowInViewport: 2,
								useRowActionsExternal: true,
								rows: [
									{
										id: "1",
										name: "Активности",
										position: 0
									},
									{
										id: "2",
										name: "База знаний",
										position: 1
									},
									{
										id: "3",
										name: "Продажи",
										position: 2
									}
								],
								columnsConfig: [
									[
										{
											cols: 24,
											key: [
												{
													name: 'name',
													type: 'text'
												}
											]
										}
									]
								],
								activeRowActions: [
									{
										className: 'BPMSoft.Button',
										style: BPMSoft.controls.ButtonEnums.style.ORANGE,
										imageConfig: LocalizableHelper.localizableImages.Up,
										tag: 'up'
									},
									{
										className: 'BPMSoft.Button',
										style: BPMSoft.controls.ButtonEnums.style.ORANGE,
										imageConfig: LocalizableHelper.localizableImages.Down,
										tag: 'down'
									},
									{
										className: 'BPMSoft.Button',
										style: BPMSoft.controls.ButtonEnums.style.ORANGE,
										caption: stringHelper.Delete,
										tag: 'delete'
									}
								]
							}],
							{
								wrapClass: ["ts-controlgroup-wrap"]
							}
					)]),
						getContainerWrapper("autoGeneratedRightContainer",
							[getContainerWrapper("rolesHeaderContainer", [{
								className: "BPMSoft.Label",
								caption: stringHelper.Roles.toUpperCase(),
								classes: {
									labelClass: ["controlGroupLabel"]
								}
							}, GridUtilities.getAddButtonConfig({
								caption: stringHelper.Add,
								id: "addRolesButton"
							})], {wrapClass: ['headerContainer']}),
								{
									className: "BPMSoft.Grid",
									type: 'tiled',
									watchRowInViewport: 2,
									useRowActionsExternal: true,
									rows: [
										{
											id: "1",
											name: "Все сотрудники компании"
										},
										{
											id: "2",
											name: "Системные администраторы"
										}
									],
									columnsConfig: [
										[
											{
												cols: 24,
												key: [
													{
														name: 'name',
														type: 'text'
													}
												]
											}
										]
									],
									activeRowActions: [
										{
											className: 'BPMSoft.Button',
											style: BPMSoft.controls.ButtonEnums.style.ORANGE,
											caption: stringHelper.Delete,
											tag: 'delete'
										}
									]
								}
							]
						)]
		);
		return config;
	};

	var getView = function() {
		if (!viewConfig) {
			viewConfig = getViewConfig();
		}
		return Ext.create("BPMSoft.Container", viewConfig);
	};

	var innerRender = function(renderTo) {
		var view = getView();
		var viewModel = getViewModel();
		view.bind(viewModel);
		view.render(renderTo);
	};

	return {
		render: innerRender
	};
});
