namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: RegistrationLanguageIteratorSchema

	/// <exclude/>
	public class RegistrationLanguageIteratorSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public RegistrationLanguageIteratorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public RegistrationLanguageIteratorSchema(RegistrationLanguageIteratorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("6da69591-0ead-4f19-a7ad-f14d7ecb200f");
			Name = "RegistrationLanguageIterator";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("7cc31540-fa76-4c79-9b86-a6eabd8e662c");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,205,86,77,111,219,56,16,61,59,64,254,3,225,94,100,192,144,239,141,229,162,142,211,192,64,138,26,113,218,61,46,104,105,100,19,149,40,151,148,154,245,6,249,239,29,126,89,162,76,59,93,44,176,216,131,97,137,154,121,156,153,247,102,72,78,75,144,123,154,2,153,175,62,175,171,188,142,111,43,158,179,109,35,104,205,42,30,175,215,171,235,171,151,235,171,235,171,65,35,25,223,146,245,65,214,80,222,244,222,209,171,40,32,85,46,50,190,7,14,130,165,39,54,15,140,255,104,23,219,253,202,178,226,161,117,1,225,213,120,49,199,15,248,233,157,128,45,238,72,110,11,42,229,123,242,136,111,178,54,129,63,80,190,109,232,22,150,53,224,66,37,180,253,100,50,33,83,217,148,37,21,135,153,125,119,6,36,199,95,129,254,106,183,205,129,20,22,64,198,206,113,210,241,220,55,155,130,165,36,85,27,95,220,151,188,39,203,211,88,6,166,162,199,4,86,162,218,131,168,25,96,22,43,13,109,190,247,3,214,11,95,37,8,146,86,156,155,122,171,248,78,3,116,17,42,227,219,163,109,255,245,133,108,161,190,33,175,102,183,189,96,63,105,13,109,192,143,77,1,228,207,12,114,218,20,117,119,241,230,108,112,11,99,124,44,31,17,104,126,57,68,127,59,11,224,173,37,218,124,16,138,132,124,248,64,162,224,135,132,112,120,14,193,69,126,17,70,35,35,166,112,62,15,200,44,169,114,146,34,72,35,0,235,158,25,73,92,200,231,142,55,37,50,189,41,96,138,178,64,61,205,76,221,13,132,236,85,253,29,240,204,200,192,215,4,70,136,222,77,138,130,249,29,85,44,57,171,25,45,216,223,184,129,74,156,161,55,229,216,215,24,252,84,2,70,46,32,79,134,151,180,58,156,204,98,18,78,77,175,236,169,160,37,225,56,49,146,97,227,213,112,56,235,139,114,58,209,214,97,103,91,76,233,220,108,109,85,247,121,142,182,160,151,98,238,145,73,252,184,198,65,50,220,246,35,242,162,117,213,131,72,122,32,55,173,145,99,48,57,98,40,253,169,114,43,157,184,13,34,165,168,193,224,245,223,179,117,87,82,86,60,65,185,47,176,47,85,4,79,84,126,255,223,211,118,226,24,104,207,225,204,77,10,7,163,7,197,127,200,254,88,211,58,240,167,79,32,210,17,142,240,122,199,100,212,7,239,203,232,204,20,58,55,62,223,104,255,207,80,239,170,76,117,190,153,202,254,136,94,131,58,109,201,61,104,92,243,22,93,202,246,22,231,150,11,244,39,21,68,26,0,51,36,173,127,111,46,154,250,168,147,189,41,121,52,92,102,195,254,146,2,61,46,126,18,85,25,13,241,168,119,153,30,191,252,177,3,1,206,58,94,242,200,248,199,43,69,53,32,149,50,242,194,28,17,42,109,76,166,247,4,224,71,110,99,238,22,207,149,67,119,223,125,195,178,153,43,137,86,73,54,63,40,192,127,84,24,197,178,2,88,242,188,178,229,209,232,145,130,39,44,27,19,131,160,79,130,145,235,245,1,203,137,151,68,252,145,31,34,204,228,69,119,102,175,230,62,109,94,36,6,205,94,122,162,197,252,238,47,72,27,117,143,200,54,199,199,164,119,140,199,119,92,34,192,98,222,46,233,173,13,148,195,82,17,8,160,25,118,110,98,67,137,13,36,60,234,229,168,221,162,227,61,120,222,49,212,113,100,92,99,101,218,5,87,240,109,193,226,143,89,22,57,83,204,210,16,253,141,22,13,24,122,140,140,198,36,108,226,230,167,149,138,62,153,205,38,200,119,247,223,252,189,118,197,97,107,170,184,250,34,16,27,50,175,176,99,143,216,209,239,137,168,11,246,150,134,220,56,81,5,250,194,139,67,123,33,62,39,29,63,162,142,4,143,87,207,174,254,76,249,108,69,240,174,10,52,221,25,82,21,26,30,32,65,69,107,93,250,12,161,46,235,102,175,111,85,68,63,196,26,32,193,51,205,52,159,163,182,189,1,43,86,61,144,79,76,200,250,34,76,204,50,199,94,128,172,22,122,161,111,220,216,5,163,248,169,82,137,250,135,231,219,211,241,173,123,17,82,41,59,21,85,183,124,149,10,217,136,234,185,115,138,157,185,210,157,28,101,2,210,74,100,40,226,217,163,126,66,90,129,215,44,103,168,230,147,51,208,100,43,103,86,58,170,119,241,124,111,147,159,78,156,197,153,235,227,201,72,147,70,75,46,138,208,224,114,202,9,13,194,238,37,198,210,227,185,105,166,3,87,102,213,168,45,24,54,184,221,222,98,88,86,61,168,115,44,218,181,238,210,235,47,194,6,184,84,133,14,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("6da69591-0ead-4f19-a7ad-f14d7ecb200f"));
		}

		#endregion

	}

	#endregion

}

