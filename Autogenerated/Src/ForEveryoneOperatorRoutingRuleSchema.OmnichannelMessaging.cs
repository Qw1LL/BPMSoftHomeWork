namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ForEveryoneOperatorRoutingRuleSchema

	/// <exclude/>
	public class ForEveryoneOperatorRoutingRuleSchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForEveryoneOperatorRoutingRuleSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForEveryoneOperatorRoutingRuleSchema(ForEveryoneOperatorRoutingRuleSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("17ba95b9-0d62-4543-8537-108041329421");
			Name = "ForEveryoneOperatorRoutingRule";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("fe318069-3d3c-4328-afd6-b81d71766949");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,157,84,219,78,227,48,16,125,46,18,255,48,155,149,80,42,33,231,189,75,43,113,41,40,18,136,46,93,180,207,198,153,22,107,19,187,248,194,210,133,254,59,227,196,161,105,233,194,106,95,162,118,230,248,156,153,51,99,43,94,161,93,112,129,112,50,185,154,234,153,99,167,90,205,228,220,27,238,164,86,236,186,82,82,220,115,165,176,100,87,104,45,159,75,53,223,223,123,222,223,235,121,75,63,97,186,180,14,171,111,91,255,137,165,44,81,4,10,203,46,80,161,145,226,29,230,82,170,135,117,112,173,95,85,90,237,138,27,220,29,101,103,39,148,160,212,87,131,115,82,132,211,146,91,59,128,115,109,198,143,104,150,90,225,245,2,169,33,109,110,180,119,116,252,198,151,88,159,200,178,12,142,172,175,42,110,150,163,248,255,2,29,232,136,183,48,211,6,200,0,199,90,116,214,129,47,252,93,41,5,136,160,247,137,220,0,78,184,221,93,71,143,220,164,239,186,124,50,205,25,47,130,254,0,38,181,70,131,216,46,183,14,228,74,58,201,75,249,7,45,40,252,13,146,78,115,69,19,213,51,2,35,130,48,56,27,38,31,151,151,100,163,208,225,251,22,155,200,130,27,94,129,162,101,25,38,222,162,161,18,85,51,222,100,212,209,184,221,76,101,163,183,98,216,81,86,115,212,148,209,182,143,43,74,55,201,96,83,182,15,3,184,35,67,211,237,240,51,172,162,155,168,138,198,208,77,119,175,208,221,235,34,24,107,228,35,119,248,207,104,237,72,3,139,206,36,164,186,167,197,118,133,22,177,255,191,140,152,77,164,248,117,187,56,55,136,223,61,250,55,136,77,47,188,44,14,33,124,251,228,86,237,77,171,3,154,188,49,178,64,184,148,214,29,5,204,8,62,36,170,247,52,143,124,240,16,0,121,65,142,4,218,158,65,231,141,130,41,221,97,234,235,6,23,218,74,58,185,172,147,61,186,163,238,184,44,143,201,196,199,14,107,63,102,127,82,159,152,106,24,142,32,213,236,148,100,106,121,27,30,11,199,105,198,233,155,218,193,1,124,201,109,128,92,202,74,186,241,147,64,44,176,72,117,63,146,245,94,94,64,179,51,105,234,46,3,176,67,211,116,16,145,173,250,20,195,83,210,200,107,22,214,130,32,236,135,14,190,164,253,240,38,244,86,255,51,21,234,57,200,183,169,244,147,49,212,174,238,58,19,125,111,157,174,67,58,2,242,2,134,144,134,107,25,187,216,220,234,182,69,122,46,125,165,210,164,229,205,139,164,73,177,115,163,43,138,211,51,28,116,147,67,72,180,104,115,205,88,66,128,194,225,8,203,237,248,193,243,50,109,248,216,36,92,57,116,104,90,99,155,131,220,198,106,250,108,252,132,194,59,156,10,94,114,211,44,89,180,180,221,152,117,39,93,167,183,238,75,19,237,6,87,240,10,60,243,188,239,91,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("17ba95b9-0d62-4543-8537-108041329421"));
		}

		#endregion

	}

	#endregion

}

