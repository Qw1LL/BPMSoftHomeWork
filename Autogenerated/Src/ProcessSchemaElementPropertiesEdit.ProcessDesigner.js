define("ProcessSchemaElementPropertiesEdit", ["ConfigurationModuleV2", "css!CommonCSSV2", "ProcessModuleUtilities",
		"css!ProcessSchemaElementPropertiesEditCSS"],
	function() {

		/**
		 * @class BPMSoft.ProcessDesigner.ProcessSchemaElementPropertiesEdit
		 * Class properties editing card module.
		 */
		Ext.define("BPMSoft.ProcessDesigner.ProcessSchemaElementPropertiesEdit", {
			alternateClassName: "BPMSoft.ProcessSchemaElementPropertiesEdit",
			extend: "BPMSoft.ConfigurationModule",

			/**
			 * @inheritDoc BPMSoft.configuration.BaseSchemaModule#isSchemaConfigInitialized
			 * @overridden
			 */
			isSchemaConfigInitialized: true,

			/**
			 * @inheritDoc BPMSoft.configuration.BaseSchemaModule#useHistoryState
			 * @overridden
			 */
			useHistoryState: false,

			/**
			 * @inheritDoc BPMSoft.configuration.BaseSchemaModule#autoGeneratedContainerSuffix
			 * @overridden
			 */
			autoGeneratedContainerSuffix: "-prSchElPropCt",

			/**
			 * Edit element tag.
			 * @private
			 */
			tag: null,

			/**
			 * @inheritdoc BPMSoft.BaseModule#render
			 * @overridden
			 */
			showMask: true,

			/**
			 * @inheritdoc BPMSoft.BaseSchemaModule#init
			 * @overridden
			 */
			init: function() {
				this.showLoadingMask();
				this.callParent(arguments);
				var sandbox = this.sandbox;
				sandbox.registerMessages({
					"ReRenderPropertiesPage": {
						direction: BPMSoft.MessageDirectionType.SUBSCRIBE,
						mode: BPMSoft.MessageMode.PTP
					}
				});
				sandbox.subscribe("ReRenderPropertiesPage", this.onReRenderPropertiesPage, this);
			},

			/**
			 * @inheritDoc BPMSoft.configuration.BaseModule#getViewModelConfig
			 * @overridden
			 */
			showLoadingMask: function() {
				if (this.maskId) {
					return;
				}
				if (this.showMask && this.renderToId) {
					this.maskId = BPMSoft.Mask.show({
						selector: Ext.String.format("#{0}", this.renderToId),
						clearMasks: true
					});
				}
			},

			/**
			 * @inheritDoc BPMSoft.configuration.BaseSchemaModule#getViewModelConfig
			 * @overridden
			 */
			getViewModelConfig: function() {
				var viewModelConfig = this.callParent(arguments);
				viewModelConfig.tag = this.tag;
				return viewModelConfig;
			},

			/**
			 * Performs rendering the page properties of the elements.
			 * @param {String} renderToId Link to the container in which to display the view.
			 */
			onReRenderPropertiesPage: function(renderToId) {
				var el = Ext.get(renderToId);
				this.render(el);
			},

			/**
			 * @inheritdoc BPMSoft.BaseSchemaModule#render
			 * @overridden
			 */
			render: function() {
				this.callParent(arguments);
				this.hideLoadingMask();
			}
		});

		return BPMSoft.ProcessSchemaElementPropertiesEdit;
	});
