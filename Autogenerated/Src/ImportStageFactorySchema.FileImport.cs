namespace BPMSoft.Configuration
{

	using BPMSoft.Common;
	using BPMSoft.Core;
	using BPMSoft.Core.Configuration;
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;

	#region Class: ImportStageFactorySchema

	/// <exclude/>
	public class ImportStageFactorySchema : BPMSoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ImportStageFactorySchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ImportStageFactorySchema(ImportStageFactorySchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("0d595c49-6a8f-46db-af6c-6f4c033b5921");
			Name = "ImportStageFactory";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("b51eda84-5cfb-4f7f-b7eb-7f869b20e7e8");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,141,85,77,107,219,64,16,61,59,144,255,48,117,46,18,8,249,222,216,6,219,177,139,41,9,1,167,167,16,202,86,26,201,11,210,174,216,93,37,21,33,255,189,179,146,108,235,203,181,125,144,209,236,155,175,55,111,71,130,165,168,51,22,32,44,159,31,119,50,50,254,74,138,136,199,185,98,134,75,225,111,120,130,219,52,147,202,220,222,124,222,222,140,114,205,69,12,187,66,27,76,9,154,36,24,88,156,246,127,160,64,197,131,251,35,230,20,79,225,176,213,223,176,192,72,197,81,211,57,33,238,20,198,20,11,96,149,48,173,191,67,149,119,103,88,140,21,178,40,97,147,201,4,166,92,236,41,157,9,101,0,129,194,104,54,222,246,209,227,201,252,0,215,121,154,50,85,28,222,9,155,96,138,194,104,224,194,160,138,44,1,83,141,120,85,176,73,35,218,235,3,70,44,79,204,146,139,144,250,115,76,145,161,140,156,129,0,174,7,79,68,54,204,64,208,159,197,244,33,238,27,133,204,242,63,9,167,182,44,9,3,28,0,17,51,196,204,136,198,67,207,35,139,27,142,73,72,44,62,43,254,206,12,86,135,89,245,2,10,89,40,69,82,192,3,47,231,71,221,76,79,163,46,3,235,181,200,83,15,180,81,212,215,28,126,235,210,88,77,106,116,135,34,172,242,180,147,146,120,200,33,183,37,217,212,101,39,21,162,59,134,210,176,162,58,168,26,78,78,76,208,8,100,212,154,194,153,33,244,167,112,224,172,239,225,184,48,59,22,111,185,199,143,235,123,182,130,167,223,39,12,193,252,103,133,25,83,216,57,243,14,227,29,62,118,225,203,187,16,85,6,168,53,93,173,60,21,250,124,240,255,160,174,205,177,22,134,27,186,125,23,146,156,129,185,23,146,172,164,189,100,230,44,63,103,206,169,120,27,246,235,130,208,30,209,236,101,56,164,177,235,55,195,81,53,75,166,187,101,212,210,108,88,156,161,46,129,55,59,251,165,81,209,13,16,213,78,132,188,245,234,193,182,30,215,34,142,169,11,70,133,44,66,150,209,250,129,160,58,168,9,151,202,173,165,199,35,112,190,213,226,181,139,217,48,186,42,63,177,112,26,105,221,3,120,100,246,74,126,148,10,39,200,147,52,27,153,139,112,253,55,192,204,230,111,250,248,47,114,87,106,220,113,93,187,155,137,239,242,249,206,20,137,159,0,47,180,198,234,109,85,167,127,109,184,191,221,31,209,237,30,23,42,174,239,88,99,17,144,49,183,187,214,25,183,193,99,175,227,237,158,194,118,9,185,16,184,11,167,208,61,74,171,224,10,77,174,104,79,217,229,90,139,129,62,93,102,58,164,129,185,211,226,162,91,46,165,239,167,33,99,149,137,8,237,234,183,182,181,37,77,182,127,11,116,203,95,132,7,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("0d595c49-6a8f-46db-af6c-6f4c033b5921"));
		}

		#endregion

	}

	#endregion

}

